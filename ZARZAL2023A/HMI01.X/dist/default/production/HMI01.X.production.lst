

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Fri May 05 08:19:13 2023

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=2
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=2
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    27                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    28                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    29                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    30                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    31  0000                     
    32                           ; Version 2.40
    33                           ; Generated 17/11/2021 GMT
    34                           ; 
    35                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    36                           ; All rights reserved.
    37                           ; 
    38                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    39                           ; 
    40                           ; Redistribution and use in source and binary forms, with or without modification, are
    41                           ; permitted provided that the following conditions are met:
    42                           ; 
    43                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    44                           ;        conditions and the following disclaimer.
    45                           ; 
    46                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    47                           ;        of conditions and the following disclaimer in the documentation and/or other
    48                           ;        materials provided with the distribution. Publication is not required when
    49                           ;        this file is used in an embedded application.
    50                           ; 
    51                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    52                           ;        software without specific prior written permission.
    53                           ; 
    54                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    55                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    56                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    57                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    58                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    59                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    60                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    61                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    62                           ; 
    63                           ; 
    64                           ; Code-generator required, PIC18F4550 Definitions
    65                           ; 
    66                           ; SFR Addresses
    67  0000                     
    68                           	psect	idataCOMRAM
    69  000F5E                     __pidataCOMRAM:
    70                           	callstack 0
    71                           
    72                           ;initializer for _opletra
    73  000F5E  61                 	db	97
    74                           
    75                           	psect	idataBANK0
    76  000F04                     __pidataBANK0:
    77                           	callstack 0
    78                           
    79                           ;initializer for _strRx
    80  000F04  20                 	db	32
    81  000F05  00                 	db	0
    82  000F06  00                 	db	0
    83  000F07  00                 	db	0
    84  000F08  00                 	db	0
    85  000F09  00                 	db	0
    86  000F0A  00                 	db	0
    87  000F0B  00                 	db	0
    88  000F0C  00                 	db	0
    89  000F0D  00                 	db	0
    90  000F0E  00                 	db	0
    91  000F0F  00                 	db	0
    92  000F10  00                 	db	0
    93  000F11  00                 	db	0
    94  000F12  00                 	db	0
    95  000F13  00                 	db	0
    96  000F14  00                 	db	0
    97  000F15  00                 	db	0
    98  000F16  00                 	db	0
    99  000F17  00                 	db	0
   100  000F18  00                 	db	0
   101  000F19  00                 	db	0
   102  000F1A  00                 	db	0
   103  000F1B  00                 	db	0
   104  000F1C  00                 	db	0
   105  000F1D  00                 	db	0
   106  000F1E  00                 	db	0
   107  000F1F  00                 	db	0
   108  000F20  00                 	db	0
   109  000F21  00                 	db	0
   110  000F22  00                 	db	0
   111  000F23  00                 	db	0
   112  000F24  00                 	db	0
   113  000F25  00                 	db	0
   114  000F26  00                 	db	0
   115  000F27  00                 	db	0
   116  000F28  00                 	db	0
   117  000F29  00                 	db	0
   118  000F2A  00                 	db	0
   119  000F2B  00                 	db	0
   120  000F2C  00                 	db	0
   121  000F2D  00                 	db	0
   122  000F2E  00                 	db	0
   123  000F2F  00                 	db	0
   124  000F30  00                 	db	0
   125  000F31  00                 	db	0
   126  000F32  00                 	db	0
   127  000F33  00                 	db	0
   128  000F34  00                 	db	0
   129  000F35  00                 	db	0
   130  0000                     _RCREG	set	4014
   131  0000                     _TXREG	set	4013
   132  0000                     _TXSTAbits	set	4012
   133  0000                     _TX9D	set	32096
   134  0000                     _BRGH	set	32098
   135  0000                     _SPEN	set	32095
   136  0000                     _SYNC	set	32100
   137  0000                     _TXEN	set	32101
   138  0000                     _RX9	set	32094
   139  0000                     _TX9	set	32102
   140  0000                     _PORTDbits	set	3971
   141  0000                     _TRISDbits	set	3989
   142  0000                     _PIR1bits	set	3998
   143  0000                     _RCSTA	set	4011
   144  0000                     _TXSTA	set	4012
   145  0000                     _SPBRG	set	4015
   146  0000                     _INTCONbits	set	4082
   147  0000                     _PIE1bits	set	3997
   148                           
   149                           	psect	smallconst
   150  000800                     __psmallconst:
   151                           	callstack 0
   152  000800  00                 	db	0
   153  000801                     STR_6:
   154  000801  55                 	db	85	;'U'
   155  000802  6E                 	db	110	;'n'
   156  000803  69                 	db	105	;'i'
   157  000804  76                 	db	118	;'v'
   158  000805  61                 	db	97	;'a'
   159  000806  6C                 	db	108	;'l'
   160  000807  6C                 	db	108	;'l'
   161  000808  65                 	db	101	;'e'
   162  000809  20                 	db	32
   163  00080A  0D                 	db	13
   164  00080B  0A                 	db	10
   165  00080C  00                 	db	0
   166  00080D                     STR_3:
   167  00080D  4C                 	db	76	;'L'
   168  00080E  65                 	db	101	;'e'
   169  00080F  64                 	db	100	;'d'
   170  000810  4F                 	db	79	;'O'
   171  000811  66                 	db	102	;'f'
   172  000812  66                 	db	102	;'f'
   173  000813  00                 	db	0
   174  000814                     STR_1:
   175  000814  4C                 	db	76	;'L'
   176  000815  65                 	db	101	;'e'
   177  000816  64                 	db	100	;'d'
   178  000817  4F                 	db	79	;'O'
   179  000818  6E                 	db	110	;'n'
   180  000819  00                 	db	0
   181  00081A                     STR_5:
   182  00081A  20                 	db	32
   183  00081B  00                 	db	0
   184  00081C  00                 	db	0	; dummy byte at the end
   185  0000                     
   186                           ; #config settings
   187                           
   188                           	psect	cinit
   189  000E4E                     __pcinit:
   190                           	callstack 0
   191  000E4E                     start_initialization:
   192                           	callstack 0
   193  000E4E                     __initialization:
   194                           	callstack 0
   195                           
   196                           ; Initialize objects allocated to BANK0 (50 bytes)
   197                           ; load TBLPTR registers with __pidataBANK0
   198  000E4E  0E04               	movlw	low __pidataBANK0
   199  000E50  6EF6               	movwf	tblptrl,c
   200  000E52  0E0F               	movlw	high __pidataBANK0
   201  000E54  6EF7               	movwf	tblptrh,c
   202  000E56  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   203  000E58  6EF8               	movwf	tblptru,c
   204  000E5A  EE00  F060         	lfsr	0,__pdataBANK0
   205  000E5E  EE10 F032          	lfsr	1,50
   206  000E62                     copy_data0:
   207  000E62  0009               	tblrd		*+
   208  000E64  CFF5 FFEE          	movff	tablat,postinc0
   209  000E68  50E5               	movf	postdec1,w,c
   210  000E6A  50E1               	movf	fsr1l,w,c
   211  000E6C  E1FA               	bnz	copy_data0
   212                           
   213                           ; Initialize objects allocated to COMRAM (1 bytes)
   214                           ; load TBLPTR registers with __pidataCOMRAM
   215  000E6E  0E5E               	movlw	low __pidataCOMRAM
   216  000E70  6EF6               	movwf	tblptrl,c
   217  000E72  0E0F               	movlw	high __pidataCOMRAM
   218  000E74  6EF7               	movwf	tblptrh,c
   219  000E76  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   220  000E78  6EF8               	movwf	tblptru,c
   221  000E7A  0009               	tblrd		*+	;fetch initializer
   222  000E7C  CFF5 F02E          	movff	tablat,__pdataCOMRAM
   223                           
   224                           ; Clear objects allocated to COMRAM (3 bytes)
   225  000E80  6A2D               	clrf	(__pbssCOMRAM+2)& (0+255),c
   226  000E82  6A2C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   227  000E84  6A2B               	clrf	__pbssCOMRAM& (0+255),c
   228  000E86                     end_of_initialization:
   229                           	callstack 0
   230  000E86                     __end_of__initialization:
   231                           	callstack 0
   232  000E86  902F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   233  000E88  922F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   234  000E8A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   235  000E8C  6EF8               	movwf	tblptru,c
   236  000E8E  0100               	movlb	0
   237  000E90  EFCA  F004         	goto	_main	;jump to C main() function
   238                           
   239                           	psect	bssCOMRAM
   240  00002B                     __pbssCOMRAM:
   241                           	callstack 0
   242  00002B                     _indexRx:
   243                           	callstack 0
   244  00002B                     	ds	2
   245  00002D                     _interpretarFlag:
   246                           	callstack 0
   247  00002D                     	ds	1
   248                           
   249                           	psect	dataCOMRAM
   250  00002E                     __pdataCOMRAM:
   251                           	callstack 0
   252  00002E                     _opletra:
   253                           	callstack 0
   254  00002E                     	ds	1
   255                           
   256                           	psect	dataBANK0
   257  000060                     __pdataBANK0:
   258                           	callstack 0
   259  000060                     _strRx:
   260                           	callstack 0
   261  000060                     	ds	50
   262                           
   263                           	psect	cstackCOMRAM
   264  000001                     __pcstackCOMRAM:
   265                           	callstack 0
   266  000001                     ??_appLedRxData:
   267  000001                     
   268                           ; 1 bytes @ 0x0
   269  000001                     	ds	3
   270  000004                     ?_strlen:
   271                           	callstack 0
   272  000004                     ?_strncmp:
   273                           	callstack 0
   274  000004                     ?_strchr:
   275                           	callstack 0
   276  000004                     ?___lldiv:
   277                           	callstack 0
   278  000004                     UART_Write_Chr@letter:
   279                           	callstack 0
   280  000004                     memset@dest:
   281                           	callstack 0
   282  000004                     strchr@s:
   283                           	callstack 0
   284  000004                     strlen@s:
   285                           	callstack 0
   286  000004                     strncmp@_l:
   287                           	callstack 0
   288  000004                     ___lldiv@dividend:
   289                           	callstack 0
   290                           
   291                           ; 4 bytes @ 0x3
   292  000004                     	ds	1
   293  000005                     UART_Write_Text@text:
   294                           	callstack 0
   295                           
   296                           ; 2 bytes @ 0x4
   297  000005                     	ds	1
   298  000006                     memset@c:
   299                           	callstack 0
   300  000006                     strchr@c:
   301                           	callstack 0
   302  000006                     strlen@a:
   303                           	callstack 0
   304  000006                     strncmp@_r:
   305                           	callstack 0
   306                           
   307                           ; 2 bytes @ 0x5
   308  000006                     	ds	1
   309  000007                     
   310                           ; 1 bytes @ 0x6
   311  000007                     	ds	1
   312  000008                     memset@n:
   313                           	callstack 0
   314  000008                     strncmp@n:
   315                           	callstack 0
   316  000008                     ___lldiv@divisor:
   317                           	callstack 0
   318                           
   319                           ; 4 bytes @ 0x7
   320  000008                     	ds	2
   321  00000A                     ??_memset:
   322  00000A                     ??_strncmp:
   323                           
   324                           ; 1 bytes @ 0x9
   325  00000A                     	ds	1
   326  00000B                     strncmp@l:
   327                           	callstack 0
   328                           
   329                           ; 2 bytes @ 0xA
   330  00000B                     	ds	1
   331  00000C                     memset@k:
   332                           	callstack 0
   333  00000C                     ___lldiv@quotient:
   334                           	callstack 0
   335                           
   336                           ; 4 bytes @ 0xB
   337  00000C                     	ds	1
   338  00000D                     strncmp@r:
   339                           	callstack 0
   340                           
   341                           ; 2 bytes @ 0xC
   342  00000D                     	ds	1
   343  00000E                     memset@s:
   344                           	callstack 0
   345                           
   346                           ; 2 bytes @ 0xD
   347  00000E                     	ds	1
   348  00000F                     ?_strstr:
   349                           	callstack 0
   350  00000F                     strstr@h:
   351                           	callstack 0
   352                           
   353                           ; 2 bytes @ 0xE
   354  00000F                     	ds	1
   355  000010                     ___lldiv@counter:
   356                           	callstack 0
   357                           
   358                           ; 1 bytes @ 0xF
   359  000010                     	ds	1
   360  000011                     strstr@n:
   361                           	callstack 0
   362  000011                     UART_Init@config:
   363                           	callstack 0
   364                           
   365                           ; 8 bytes @ 0x10
   366  000011                     	ds	2
   367  000013                     strstr@nl:
   368                           	callstack 0
   369                           
   370                           ; 2 bytes @ 0x12
   371  000013                     	ds	6
   372  000019                     ??_UART_Init:
   373                           
   374                           ; 1 bytes @ 0x18
   375  000019                     	ds	4
   376  00001D                     UART_Init@spbrg_val:
   377                           	callstack 0
   378                           
   379                           ; 4 bytes @ 0x1C
   380  00001D                     	ds	4
   381  000021                     ??_main:
   382                           
   383                           ; 1 bytes @ 0x20
   384  000021                     	ds	2
   385  000023                     main@uartConfig:
   386                           	callstack 0
   387                           
   388                           ; 8 bytes @ 0x22
   389  000023                     	ds	8
   390                           
   391 ;;
   392 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   393 ;;
   394 ;; *************** function _main *****************
   395 ;; Defined at:
   396 ;;		line 24 in file "main.c"
   397 ;; Parameters:    Size  Location     Type
   398 ;;		None
   399 ;; Auto vars:     Size  Location     Type
   400 ;;  uartConfig      8   34[COMRAM] struct .
   401 ;; Return value:  Size  Location     Type
   402 ;;                  1    wreg      void 
   403 ;; Registers used:
   404 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   405 ;; Tracked objects:
   406 ;;		On entry : 0/0
   407 ;;		On exit  : 0/0
   408 ;;		Unchanged: 0/0
   409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   410 ;;      Params:         0       0       0       0       0       0       0       0       0
   411 ;;      Locals:         8       0       0       0       0       0       0       0       0
   412 ;;      Temps:          2       0       0       0       0       0       0       0       0
   413 ;;      Totals:        10       0       0       0       0       0       0       0       0
   414 ;;Total ram usage:       10 bytes
   415 ;; Hardware stack levels required when called: 4
   416 ;; This function calls:
   417 ;;		_UART_Init
   418 ;;		_UART_Write_Text
   419 ;;		_memset
   420 ;;		_strstr
   421 ;; This function is called by:
   422 ;;		Startup code after reset
   423 ;; This function uses a non-reentrant model
   424 ;;
   425                           
   426                           	psect	text0
   427  000994                     __ptext0:
   428                           	callstack 0
   429  000994                     _main:
   430                           	callstack 27
   431  000994                     
   432                           ;main.c: 26:     TRISDbits.RD0 = 0;
   433  000994  9095               	bcf	149,0,c	;volatile
   434                           
   435                           ;main.c: 28:     INTCONbits.GIE = 1;
   436  000996  8EF2               	bsf	242,7,c	;volatile
   437                           
   438                           ;main.c: 29:     INTCONbits.PEIE = 1;
   439  000998  8CF2               	bsf	242,6,c	;volatile
   440                           
   441                           ;main.c: 30:     PIE1bits.RCIE = 1;
   442  00099A  8A9D               	bsf	157,5,c	;volatile
   443  00099C                     
   444                           ;main.c: 32:     UART_Config uartConfig;;main.c: 34:     uartConfig.baud_rate = 9600;
   445  00099C  0E80               	movlw	128
   446  00099E  6E23               	movwf	main@uartConfig^0,c
   447  0009A0  0E25               	movlw	37
   448  0009A2  6E24               	movwf	(main@uartConfig+1)^0,c
   449  0009A4  0E00               	movlw	0
   450  0009A6  6E25               	movwf	(main@uartConfig+2)^0,c
   451  0009A8  0E00               	movlw	0
   452  0009AA  6E26               	movwf	(main@uartConfig+3)^0,c
   453                           
   454                           ;main.c: 35:     uartConfig.data_bits = 8;
   455  0009AC  0E08               	movlw	8
   456  0009AE  6E27               	movwf	(main@uartConfig+4)^0,c
   457                           
   458                           ;main.c: 36:     uartConfig.parity = 0;
   459  0009B0  0E00               	movlw	0
   460  0009B2  6E28               	movwf	(main@uartConfig+5)^0,c
   461                           
   462                           ;main.c: 37:     uartConfig.stop_bits = 1;
   463  0009B4  0E01               	movlw	1
   464  0009B6  6E29               	movwf	(main@uartConfig+6)^0,c
   465  0009B8                     
   466                           ;main.c: 39:     UART_Init(uartConfig);
   467  0009B8  EE20  F023         	lfsr	2,main@uartConfig
   468  0009BC  EE00  F011         	lfsr	0,UART_Init@config
   469  0009C0  0E07               	movlw	7
   470  0009C2                     u651:
   471  0009C2  CFDB FFEB          	movff	plusw2,plusw0
   472  0009C6  06E8               	decf	wreg,f,c
   473  0009C8  E2FC               	bc	u651
   474  0009CA  EC42  F005         	call	_UART_Init	;wreg free
   475  0009CE                     l1214:
   476                           
   477                           ;main.c: 43:         if( interpretarFlag == 1){
   478  0009CE  042D               	decf	_interpretarFlag^0,w,c
   479  0009D0  A4D8               	btfss	status,2,c
   480  0009D2  EFED  F004         	goto	u661
   481  0009D6  EFEF  F004         	goto	u660
   482  0009DA                     u661:
   483  0009DA  EF2D  F005         	goto	l1230
   484  0009DE                     u660:
   485  0009DE                     
   486                           ;main.c: 45:             if( strstr(strRx,"LedOn") ){
   487  0009DE  0E60               	movlw	low _strRx
   488  0009E0  6E0F               	movwf	strstr@h^0,c
   489  0009E2  0E00               	movlw	high _strRx
   490  0009E4  6E10               	movwf	(strstr@h+1)^0,c
   491  0009E6  0E14               	movlw	low STR_1
   492  0009E8  6E11               	movwf	strstr@n^0,c
   493  0009EA  0E08               	movlw	high STR_1
   494  0009EC  6E12               	movwf	(strstr@n+1)^0,c
   495  0009EE  EC21  F006         	call	_strstr	;wreg free
   496  0009F2  500F               	movf	?_strstr^0,w,c
   497  0009F4  1010               	iorwf	(?_strstr+1)^0,w,c
   498  0009F6  B4D8               	btfsc	status,2,c
   499  0009F8  EF00  F005         	goto	u671
   500  0009FC  EF02  F005         	goto	u670
   501  000A00                     u671:
   502  000A00  EF05  F005         	goto	l1220
   503  000A04                     u670:
   504  000A04                     
   505                           ;main.c: 46:                 PORTDbits.RD0 = 1;
   506  000A04  8083               	bsf	131,0,c	;volatile
   507                           
   508                           ;main.c: 47:             }
   509  000A06  EF19  F005         	goto	l1224
   510  000A0A                     l1220:
   511  000A0A  0E60               	movlw	low _strRx
   512  000A0C  6E0F               	movwf	strstr@h^0,c
   513  000A0E  0E00               	movlw	high _strRx
   514  000A10  6E10               	movwf	(strstr@h+1)^0,c
   515  000A12  0E0D               	movlw	low STR_3
   516  000A14  6E11               	movwf	strstr@n^0,c
   517  000A16  0E08               	movlw	high STR_3
   518  000A18  6E12               	movwf	(strstr@n+1)^0,c
   519  000A1A  EC21  F006         	call	_strstr	;wreg free
   520  000A1E  500F               	movf	?_strstr^0,w,c
   521  000A20  1010               	iorwf	(?_strstr+1)^0,w,c
   522  000A22  B4D8               	btfsc	status,2,c
   523  000A24  EF16  F005         	goto	u681
   524  000A28  EF18  F005         	goto	u680
   525  000A2C                     u681:
   526  000A2C  EF19  F005         	goto	l1224
   527  000A30                     u680:
   528  000A30                     
   529                           ;main.c: 49:                 PORTDbits.RD0 = 0;
   530  000A30  9083               	bcf	131,0,c	;volatile
   531  000A32                     l1224:
   532                           
   533                           ;main.c: 51:             indexRx = 0;
   534  000A32  0E00               	movlw	0
   535  000A34  6E2C               	movwf	(_indexRx+1)^0,c
   536  000A36  0E00               	movlw	0
   537  000A38  6E2B               	movwf	_indexRx^0,c
   538  000A3A                     
   539                           ;main.c: 52:             memset(strRx," ",50);
   540  000A3A  0E60               	movlw	low _strRx
   541  000A3C  6E04               	movwf	memset@dest^0,c
   542  000A3E  0E00               	movlw	high _strRx
   543  000A40  6E05               	movwf	(memset@dest+1)^0,c
   544  000A42  0E08               	movlw	high STR_5
   545  000A44  6E07               	movwf	(memset@c+1)^0,c
   546  000A46  0E1A               	movlw	low STR_5
   547  000A48  6E06               	movwf	memset@c^0,c
   548  000A4A  0E00               	movlw	0
   549  000A4C  6E09               	movwf	(memset@n+1)^0,c
   550  000A4E  0E32               	movlw	50
   551  000A50  6E08               	movwf	memset@n^0,c
   552  000A52  EC0F  F004         	call	_memset	;wreg free
   553  000A56                     
   554                           ;main.c: 53:             interpretarFlag=0;
   555  000A56  0E00               	movlw	0
   556  000A58  6E2D               	movwf	_interpretarFlag^0,c
   557  000A5A                     l1230:
   558                           
   559                           ;main.c: 58:         UART_Write_Text("Univalle \r\n");
   560  000A5A  0E01               	movlw	low STR_6
   561  000A5C  6E05               	movwf	UART_Write_Text@text^0,c
   562  000A5E  0E08               	movlw	high STR_6
   563  000A60  6E06               	movwf	(UART_Write_Text@text+1)^0,c
   564  000A62  EC67  F007         	call	_UART_Write_Text	;wreg free
   565  000A66                     
   566                           ;main.c: 59:         _delay((unsigned long)((300)*(20000000UL/4000.0)));
   567  000A66  0E08               	movlw	8
   568  000A68  6E22               	movwf	(??_main+1)^0,c
   569  000A6A  0E9D               	movlw	157
   570  000A6C  6E21               	movwf	??_main^0,c
   571  000A6E  0E06               	movlw	6
   572  000A70                     u697:
   573  000A70  2EE8               	decfsz	wreg,f,c
   574  000A72  D7FE               	bra	u697
   575  000A74  2E21               	decfsz	??_main^0,f,c
   576  000A76  D7FC               	bra	u697
   577  000A78  2E22               	decfsz	(??_main+1)^0,f,c
   578  000A7A  D7FA               	bra	u697
   579  000A7C  EFE7  F004         	goto	l1214
   580  000A80  EF07  F000         	goto	start
   581  000A84                     __end_of_main:
   582                           	callstack 0
   583                           
   584 ;; *************** function _strstr *****************
   585 ;; Defined at:
   586 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\strstr.c"
   587 ;; Parameters:    Size  Location     Type
   588 ;;  h               2   14[COMRAM] PTR const unsigned char 
   589 ;;		 -> NULL(0), strRx(50), 
   590 ;;  n               2   16[COMRAM] PTR const unsigned char 
   591 ;;		 -> STR_4(7), STR_2(6), 
   592 ;; Auto vars:     Size  Location     Type
   593 ;;  nl              2   18[COMRAM] unsigned int 
   594 ;; Return value:  Size  Location     Type
   595 ;;                  2   14[COMRAM] PTR unsigned char 
   596 ;; Registers used:
   597 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   598 ;; Tracked objects:
   599 ;;		On entry : 0/0
   600 ;;		On exit  : 0/0
   601 ;;		Unchanged: 0/0
   602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   603 ;;      Params:         4       0       0       0       0       0       0       0       0
   604 ;;      Locals:         2       0       0       0       0       0       0       0       0
   605 ;;      Temps:          0       0       0       0       0       0       0       0       0
   606 ;;      Totals:         6       0       0       0       0       0       0       0       0
   607 ;;Total ram usage:        6 bytes
   608 ;; Hardware stack levels used: 1
   609 ;; Hardware stack levels required when called: 3
   610 ;; This function calls:
   611 ;;		_strchr
   612 ;;		_strlen
   613 ;;		_strncmp
   614 ;; This function is called by:
   615 ;;		_main
   616 ;; This function uses a non-reentrant model
   617 ;;
   618                           
   619                           	psect	text1
   620  000C42                     __ptext1:
   621                           	callstack 0
   622  000C42                     _strstr:
   623                           	callstack 27
   624  000C42  5011               	movf	strstr@n^0,w,c
   625  000C44  1012               	iorwf	(strstr@n+1)^0,w,c
   626  000C46  B4D8               	btfsc	status,2,c
   627  000C48  EF28  F006         	goto	u531
   628  000C4C  EF2A  F006         	goto	u530
   629  000C50                     u531:
   630  000C50  EF7C  F006         	goto	l1154
   631  000C54                     u530:
   632  000C54  C011  F004         	movff	strstr@n,strlen@s
   633  000C58  C012  F005         	movff	strstr@n+1,strlen@s+1
   634  000C5C  EC4A  F007         	call	_strlen	;wreg free
   635  000C60  C004  F013         	movff	?_strlen,strstr@nl
   636  000C64  C005  F014         	movff	?_strlen+1,strstr@nl+1
   637  000C68  EF67  F006         	goto	l1150
   638  000C6C                     l1142:
   639  000C6C  C00F  F004         	movff	strstr@h,strncmp@_l
   640  000C70  C010  F005         	movff	strstr@h+1,strncmp@_l+1
   641  000C74  C011  F006         	movff	strstr@n,strncmp@_r
   642  000C78  C012  F007         	movff	strstr@n+1,strncmp@_r+1
   643  000C7C  C013  F008         	movff	strstr@nl,strncmp@n
   644  000C80  C014  F009         	movff	strstr@nl+1,strncmp@n+1
   645  000C84  ECB6  F005         	call	_strncmp	;wreg free
   646  000C88  5004               	movf	?_strncmp^0,w,c
   647  000C8A  1005               	iorwf	(?_strncmp+1)^0,w,c
   648  000C8C  A4D8               	btfss	status,2,c
   649  000C8E  EF4B  F006         	goto	u541
   650  000C92  EF4D  F006         	goto	u540
   651  000C96                     u541:
   652  000C96  EF53  F006         	goto	l1148
   653  000C9A                     u540:
   654  000C9A  C00F  F00F         	movff	strstr@h,?_strstr
   655  000C9E  C010  F010         	movff	strstr@h+1,?_strstr+1
   656  000CA2  EF80  F006         	goto	l800
   657  000CA6                     l1148:
   658  000CA6  0E01               	movlw	1
   659  000CA8  240F               	addwf	strstr@h^0,w,c
   660  000CAA  6E04               	movwf	strchr@s^0,c
   661  000CAC  0E00               	movlw	0
   662  000CAE  2010               	addwfc	(strstr@h+1)^0,w,c
   663  000CB0  6E05               	movwf	(strchr@s+1)^0,c
   664  000CB2  C011  FFF6         	movff	strstr@n,tblptrl
   665  000CB6  C012  FFF7         	movff	strstr@n+1,tblptrh
   666  000CBA                     	if	0	;tblptru may be non-zero
   667  000CBA                     	endif
   668  000CBA                     	if	0	;tblptru may be non-zero
   669  000CBA                     	endif
   670  000CBA  0008               	tblrd		*
   671  000CBC  50F5               	movf	tablat,w,c
   672  000CBE  6E06               	movwf	strchr@c^0,c
   673  000CC0  6A07               	clrf	(strchr@c+1)^0,c
   674  000CC2  EC01  F007         	call	_strchr	;wreg free
   675  000CC6  C004  F00F         	movff	?_strchr,strstr@h
   676  000CCA  C005  F010         	movff	?_strchr+1,strstr@h+1
   677  000CCE                     l1150:
   678  000CCE  500F               	movf	strstr@h^0,w,c
   679  000CD0  1010               	iorwf	(strstr@h+1)^0,w,c
   680  000CD2  B4D8               	btfsc	status,2,c
   681  000CD4  EF6E  F006         	goto	u551
   682  000CD8  EF70  F006         	goto	u550
   683  000CDC                     u551:
   684  000CDC  EF7C  F006         	goto	l1154
   685  000CE0                     u550:
   686  000CE0  C00F  FFD9         	movff	strstr@h,fsr2l
   687  000CE4  C010  FFDA         	movff	strstr@h+1,fsr2h
   688  000CE8  50DF               	movf	indf2,w,c
   689  000CEA  A4D8               	btfss	status,2,c
   690  000CEC  EF7A  F006         	goto	u561
   691  000CF0  EF7C  F006         	goto	u560
   692  000CF4                     u561:
   693  000CF4  EF36  F006         	goto	l1142
   694  000CF8                     u560:
   695  000CF8                     l1154:
   696  000CF8  0E00               	movlw	0
   697  000CFA  6E0F               	movwf	?_strstr^0,c
   698  000CFC  0E00               	movlw	0
   699  000CFE  6E10               	movwf	(?_strstr+1)^0,c
   700  000D00                     l800:
   701  000D00  0012               	return		;funcret
   702  000D02                     __end_of_strstr:
   703                           	callstack 0
   704                           
   705 ;; *************** function _strncmp *****************
   706 ;; Defined at:
   707 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\strncmp.c"
   708 ;; Parameters:    Size  Location     Type
   709 ;;  _l              2    3[COMRAM] PTR const unsigned char 
   710 ;;		 -> NULL(0), strRx(50), 
   711 ;;  _r              2    5[COMRAM] PTR const unsigned char 
   712 ;;		 -> STR_4(7), STR_2(6), 
   713 ;;  n               2    7[COMRAM] unsigned int 
   714 ;; Auto vars:     Size  Location     Type
   715 ;;  r               2   12[COMRAM] PTR const unsigned char 
   716 ;;		 -> STR_4(7), STR_2(6), 
   717 ;;  l               2   10[COMRAM] PTR const unsigned char 
   718 ;;		 -> NULL(0), strRx(50), 
   719 ;; Return value:  Size  Location     Type
   720 ;;                  2    3[COMRAM] int 
   721 ;; Registers used:
   722 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
   723 ;; Tracked objects:
   724 ;;		On entry : 0/0
   725 ;;		On exit  : 0/0
   726 ;;		Unchanged: 0/0
   727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   728 ;;      Params:         6       0       0       0       0       0       0       0       0
   729 ;;      Locals:         4       0       0       0       0       0       0       0       0
   730 ;;      Temps:          1       0       0       0       0       0       0       0       0
   731 ;;      Totals:        11       0       0       0       0       0       0       0       0
   732 ;;Total ram usage:       11 bytes
   733 ;; Hardware stack levels used: 1
   734 ;; Hardware stack levels required when called: 2
   735 ;; This function calls:
   736 ;;		Nothing
   737 ;; This function is called by:
   738 ;;		_strstr
   739 ;; This function uses a non-reentrant model
   740 ;;
   741                           
   742                           	psect	text2
   743  000B6C                     __ptext2:
   744                           	callstack 0
   745  000B6C                     _strncmp:
   746                           	callstack 27
   747  000B6C  C004  F00B         	movff	strncmp@_l,strncmp@l
   748  000B70  C005  F00C         	movff	strncmp@_l+1,strncmp@l+1
   749  000B74  C006  F00D         	movff	strncmp@_r,strncmp@r
   750  000B78  C007  F00E         	movff	strncmp@_r+1,strncmp@r+1
   751  000B7C  0608               	decf	strncmp@n^0,f,c
   752  000B7E  A0D8               	btfss	status,0,c
   753  000B80  0609               	decf	(strncmp@n+1)^0,f,c
   754  000B82  2808               	incf	strncmp@n^0,w,c
   755  000B84  E106               	bnz	u401
   756  000B86  2809               	incf	(strncmp@n+1)^0,w,c
   757  000B88  A4D8               	btfss	status,2,c
   758  000B8A  EFC9  F005         	goto	u401
   759  000B8E  EFCB  F005         	goto	u400
   760  000B92                     u401:
   761  000B92  EFD8  F005         	goto	l1076
   762  000B96                     u400:
   763  000B96  0E00               	movlw	0
   764  000B98  6E05               	movwf	(?_strncmp+1)^0,c
   765  000B9A  0E00               	movlw	0
   766  000B9C  6E04               	movwf	?_strncmp^0,c
   767  000B9E  EF20  F006         	goto	l819
   768  000BA2                     l1074:
   769  000BA2  4A0B               	infsnz	strncmp@l^0,f,c
   770  000BA4  2A0C               	incf	(strncmp@l+1)^0,f,c
   771  000BA6  4A0D               	infsnz	strncmp@r^0,f,c
   772  000BA8  2A0E               	incf	(strncmp@r+1)^0,f,c
   773  000BAA  0608               	decf	strncmp@n^0,f,c
   774  000BAC  A0D8               	btfss	status,0,c
   775  000BAE  0609               	decf	(strncmp@n+1)^0,f,c
   776  000BB0                     l1076:
   777  000BB0  C00B  FFD9         	movff	strncmp@l,fsr2l
   778  000BB4  C00C  FFDA         	movff	strncmp@l+1,fsr2h
   779  000BB8  50DF               	movf	indf2,w,c
   780  000BBA  B4D8               	btfsc	status,2,c
   781  000BBC  EFE2  F005         	goto	u411
   782  000BC0  EFE4  F005         	goto	u410
   783  000BC4                     u411:
   784  000BC4  EF0F  F006         	goto	l1084
   785  000BC8                     u410:
   786  000BC8  C00D  FFF6         	movff	strncmp@r,tblptrl
   787  000BCC  C00E  FFF7         	movff	strncmp@r+1,tblptrh
   788  000BD0                     	if	0	;tblptru may be non-zero
   789  000BD0                     	endif
   790  000BD0                     	if	0	;tblptru may be non-zero
   791  000BD0                     	endif
   792  000BD0  0008               	tblrd		*
   793  000BD2  50F5               	movf	tablat,w,c
   794  000BD4  0900               	iorlw	0
   795  000BD6  B4D8               	btfsc	status,2,c
   796  000BD8  EFF0  F005         	goto	u421
   797  000BDC  EFF2  F005         	goto	u420
   798  000BE0                     u421:
   799  000BE0  EF0F  F006         	goto	l1084
   800  000BE4                     u420:
   801  000BE4  5008               	movf	strncmp@n^0,w,c
   802  000BE6  1009               	iorwf	(strncmp@n+1)^0,w,c
   803  000BE8  B4D8               	btfsc	status,2,c
   804  000BEA  EFF9  F005         	goto	u431
   805  000BEE  EFFB  F005         	goto	u430
   806  000BF2                     u431:
   807  000BF2  EF0F  F006         	goto	l1084
   808  000BF6                     u430:
   809  000BF6  C00B  FFD9         	movff	strncmp@l,fsr2l
   810  000BFA  C00C  FFDA         	movff	strncmp@l+1,fsr2h
   811  000BFE  50DF               	movf	indf2,w,c
   812  000C00  6E0A               	movwf	??_strncmp^0,c
   813  000C02  C00D  FFF6         	movff	strncmp@r,tblptrl
   814  000C06  C00E  FFF7         	movff	strncmp@r+1,tblptrh
   815  000C0A                     	if	0	;tblptru may be non-zero
   816  000C0A                     	endif
   817  000C0A                     	if	0	;tblptru may be non-zero
   818  000C0A                     	endif
   819  000C0A  0008               	tblrd		*
   820  000C0C  50F5               	movf	tablat,w,c
   821  000C0E  180A               	xorwf	??_strncmp^0,w,c
   822  000C10  B4D8               	btfsc	status,2,c
   823  000C12  EF0D  F006         	goto	u441
   824  000C16  EF0F  F006         	goto	u440
   825  000C1A                     u441:
   826  000C1A  EFD1  F005         	goto	l1074
   827  000C1E                     u440:
   828  000C1E                     l1084:
   829  000C1E  C00B  FFD9         	movff	strncmp@l,fsr2l
   830  000C22  C00C  FFDA         	movff	strncmp@l+1,fsr2h
   831  000C26  50DF               	movf	indf2,w,c
   832  000C28  6E0A               	movwf	??_strncmp^0,c
   833  000C2A  C00D  FFF6         	movff	strncmp@r,tblptrl
   834  000C2E  C00E  FFF7         	movff	strncmp@r+1,tblptrh
   835  000C32                     	if	0	;tblptru may be non-zero
   836  000C32                     	endif
   837  000C32                     	if	0	;tblptru may be non-zero
   838  000C32                     	endif
   839  000C32  0008               	tblrd		*
   840  000C34  50F5               	movf	tablat,w,c
   841  000C36  5C0A               	subwf	??_strncmp^0,w,c
   842  000C38  6E04               	movwf	?_strncmp^0,c
   843  000C3A  6A05               	clrf	(?_strncmp+1)^0,c
   844  000C3C  A0D8               	btfss	status,0,c
   845  000C3E  0605               	decf	(?_strncmp+1)^0,f,c
   846  000C40                     l819:
   847  000C40  0012               	return		;funcret
   848  000C42                     __end_of_strncmp:
   849                           	callstack 0
   850                           
   851 ;; *************** function _strlen *****************
   852 ;; Defined at:
   853 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\strlen.c"
   854 ;; Parameters:    Size  Location     Type
   855 ;;  s               2    3[COMRAM] PTR const unsigned char 
   856 ;;		 -> STR_4(7), STR_2(6), 
   857 ;; Auto vars:     Size  Location     Type
   858 ;;  a               2    5[COMRAM] PTR const unsigned char 
   859 ;;		 -> STR_4(7), STR_2(6), 
   860 ;; Return value:  Size  Location     Type
   861 ;;                  2    3[COMRAM] unsigned int 
   862 ;; Registers used:
   863 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
   864 ;; Tracked objects:
   865 ;;		On entry : 0/0
   866 ;;		On exit  : 0/0
   867 ;;		Unchanged: 0/0
   868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   869 ;;      Params:         2       0       0       0       0       0       0       0       0
   870 ;;      Locals:         2       0       0       0       0       0       0       0       0
   871 ;;      Temps:          0       0       0       0       0       0       0       0       0
   872 ;;      Totals:         4       0       0       0       0       0       0       0       0
   873 ;;Total ram usage:        4 bytes
   874 ;; Hardware stack levels used: 1
   875 ;; Hardware stack levels required when called: 2
   876 ;; This function calls:
   877 ;;		Nothing
   878 ;; This function is called by:
   879 ;;		_strstr
   880 ;; This function uses a non-reentrant model
   881 ;;
   882                           
   883                           	psect	text3
   884  000E94                     __ptext3:
   885                           	callstack 0
   886  000E94                     _strlen:
   887                           	callstack 27
   888  000E94  C004  F006         	movff	strlen@s,strlen@a
   889  000E98  C005  F007         	movff	strlen@s+1,strlen@a+1
   890  000E9C  EF52  F007         	goto	l1062
   891  000EA0                     l1060:
   892  000EA0  4A04               	infsnz	strlen@s^0,f,c
   893  000EA2  2A05               	incf	(strlen@s+1)^0,f,c
   894  000EA4                     l1062:
   895  000EA4  C004  FFF6         	movff	strlen@s,tblptrl
   896  000EA8  C005  FFF7         	movff	strlen@s+1,tblptrh
   897  000EAC                     	if	0	;tblptru may be non-zero
   898  000EAC                     	endif
   899  000EAC                     	if	0	;tblptru may be non-zero
   900  000EAC                     	endif
   901  000EAC  0008               	tblrd		*
   902  000EAE  50F5               	movf	tablat,w,c
   903  000EB0  0900               	iorlw	0
   904  000EB2  A4D8               	btfss	status,2,c
   905  000EB4  EF5E  F007         	goto	u391
   906  000EB8  EF60  F007         	goto	u390
   907  000EBC                     u391:
   908  000EBC  EF50  F007         	goto	l1060
   909  000EC0                     u390:
   910  000EC0  5006               	movf	strlen@a^0,w,c
   911  000EC2  5C04               	subwf	strlen@s^0,w,c
   912  000EC4  6E04               	movwf	?_strlen^0,c
   913  000EC6  5007               	movf	(strlen@a+1)^0,w,c
   914  000EC8  5805               	subwfb	(strlen@s+1)^0,w,c
   915  000ECA  6E05               	movwf	(?_strlen+1)^0,c
   916  000ECC  0012               	return		;funcret
   917  000ECE                     __end_of_strlen:
   918                           	callstack 0
   919                           
   920 ;; *************** function _strchr *****************
   921 ;; Defined at:
   922 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\strchr.c"
   923 ;; Parameters:    Size  Location     Type
   924 ;;  s               2    3[COMRAM] PTR const unsigned char 
   925 ;;		 -> NULL(0), strRx(50), 
   926 ;;  c               2    5[COMRAM] int 
   927 ;; Auto vars:     Size  Location     Type
   928 ;;		None
   929 ;; Return value:  Size  Location     Type
   930 ;;                  2    3[COMRAM] PTR unsigned char 
   931 ;; Registers used:
   932 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   933 ;; Tracked objects:
   934 ;;		On entry : 0/0
   935 ;;		On exit  : 0/0
   936 ;;		Unchanged: 0/0
   937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   938 ;;      Params:         4       0       0       0       0       0       0       0       0
   939 ;;      Locals:         0       0       0       0       0       0       0       0       0
   940 ;;      Temps:          1       0       0       0       0       0       0       0       0
   941 ;;      Totals:         5       0       0       0       0       0       0       0       0
   942 ;;Total ram usage:        5 bytes
   943 ;; Hardware stack levels used: 1
   944 ;; Hardware stack levels required when called: 2
   945 ;; This function calls:
   946 ;;		Nothing
   947 ;; This function is called by:
   948 ;;		_strstr
   949 ;; This function uses a non-reentrant model
   950 ;;
   951                           
   952                           	psect	text4
   953  000E02                     __ptext4:
   954                           	callstack 0
   955  000E02                     _strchr:
   956                           	callstack 27
   957  000E02                     l806:
   958  000E02  C004  FFD9         	movff	strchr@s,fsr2l
   959  000E06  C005  FFDA         	movff	strchr@s+1,fsr2h
   960  000E0A  5006               	movf	strchr@c^0,w,c
   961  000E0C  18DE               	xorwf	postinc2,w,c
   962  000E0E  A4D8               	btfss	status,2,c
   963  000E10  EF0C  F007         	goto	u451
   964  000E14  EF0E  F007         	goto	u450
   965  000E18                     u451:
   966  000E18  EF14  F007         	goto	l1094
   967  000E1C                     u450:
   968  000E1C  C004  F004         	movff	strchr@s,?_strchr
   969  000E20  C005  F005         	movff	strchr@s+1,?_strchr+1
   970  000E24  EF26  F007         	goto	l808
   971  000E28                     l1094:
   972  000E28  C004  FFD9         	movff	strchr@s,fsr2l
   973  000E2C  C005  FFDA         	movff	strchr@s+1,fsr2h
   974  000E30  4A04               	infsnz	strchr@s^0,f,c
   975  000E32  2A05               	incf	(strchr@s+1)^0,f,c
   976  000E34  50DF               	movf	indf2,w,c
   977  000E36  A4D8               	btfss	status,2,c
   978  000E38  EF20  F007         	goto	u461
   979  000E3C  EF22  F007         	goto	u460
   980  000E40                     u461:
   981  000E40  EF01  F007         	goto	l806
   982  000E44                     u460:
   983  000E44  0E00               	movlw	0
   984  000E46  6E04               	movwf	?_strchr^0,c
   985  000E48  0E00               	movlw	0
   986  000E4A  6E05               	movwf	(?_strchr+1)^0,c
   987  000E4C                     l808:
   988  000E4C  0012               	return		;funcret
   989  000E4E                     __end_of_strchr:
   990                           	callstack 0
   991                           
   992 ;; *************** function _memset *****************
   993 ;; Defined at:
   994 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\memset.c"
   995 ;; Parameters:    Size  Location     Type
   996 ;;  dest            2    3[COMRAM] PTR void 
   997 ;;		 -> strRx(50), 
   998 ;;  c               2    5[COMRAM] int 
   999 ;;  n               2    7[COMRAM] unsigned int 
  1000 ;; Auto vars:     Size  Location     Type
  1001 ;;  s               2   13[COMRAM] PTR unsigned char 
  1002 ;;		 -> strRx(50), 
  1003 ;;  k               2   11[COMRAM] unsigned int 
  1004 ;; Return value:  Size  Location     Type
  1005 ;;                  2    3[COMRAM] PTR void 
  1006 ;; Registers used:
  1007 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1008 ;; Tracked objects:
  1009 ;;		On entry : 0/0
  1010 ;;		On exit  : 0/0
  1011 ;;		Unchanged: 0/0
  1012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1013 ;;      Params:         6       0       0       0       0       0       0       0       0
  1014 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1015 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1016 ;;      Totals:        12       0       0       0       0       0       0       0       0
  1017 ;;Total ram usage:       12 bytes
  1018 ;; Hardware stack levels used: 1
  1019 ;; Hardware stack levels required when called: 2
  1020 ;; This function calls:
  1021 ;;		Nothing
  1022 ;; This function is called by:
  1023 ;;		_main
  1024 ;; This function uses a non-reentrant model
  1025 ;;
  1026                           
  1027                           	psect	text5
  1028  00081E                     __ptext5:
  1029                           	callstack 0
  1030  00081E                     _memset:
  1031                           	callstack 28
  1032  00081E  C004  F00E         	movff	memset@dest,memset@s
  1033  000822  C005  F00F         	movff	memset@dest+1,memset@s+1
  1034  000826  5008               	movf	memset@n^0,w,c
  1035  000828  1009               	iorwf	(memset@n+1)^0,w,c
  1036  00082A  A4D8               	btfss	status,2,c
  1037  00082C  EF1A  F004         	goto	u571
  1038  000830  EF1C  F004         	goto	u570
  1039  000834                     u571:
  1040  000834  EF1E  F004         	goto	l1162
  1041  000838                     u570:
  1042  000838  EFC9  F004         	goto	l781
  1043  00083C                     l1162:
  1044  00083C  C00E  FFD9         	movff	memset@s,fsr2l
  1045  000840  C00F  FFDA         	movff	memset@s+1,fsr2h
  1046  000844  C006  FFDF         	movff	memset@c,indf2
  1047  000848  5008               	movf	memset@n^0,w,c
  1048  00084A  240E               	addwf	memset@s^0,w,c
  1049  00084C  6E0A               	movwf	??_memset^0,c
  1050  00084E  5009               	movf	(memset@n+1)^0,w,c
  1051  000850  200F               	addwfc	(memset@s+1)^0,w,c
  1052  000852  6E0B               	movwf	(??_memset+1)^0,c
  1053  000854  0EFF               	movlw	255
  1054  000856  240A               	addwf	??_memset^0,w,c
  1055  000858  6ED9               	movwf	fsr2l,c
  1056  00085A  0EFF               	movlw	255
  1057  00085C  200B               	addwfc	(??_memset+1)^0,w,c
  1058  00085E  6EDA               	movwf	fsr2h,c
  1059  000860  C006  FFDF         	movff	memset@c,indf2
  1060  000864  5009               	movf	(memset@n+1)^0,w,c
  1061  000866  E107               	bnz	u581
  1062  000868  0E03               	movlw	3
  1063  00086A  5C08               	subwf	memset@n^0,w,c
  1064  00086C  B0D8               	btfsc	status,0,c
  1065  00086E  EF3B  F004         	goto	u581
  1066  000872  EF3D  F004         	goto	u580
  1067  000876                     u581:
  1068  000876  EF3F  F004         	goto	l1168
  1069  00087A                     u580:
  1070  00087A  EFC9  F004         	goto	l781
  1071  00087E                     l1168:
  1072  00087E  EE20 F001          	lfsr	2,1
  1073  000882  500E               	movf	memset@s^0,w,c
  1074  000884  26D9               	addwf	fsr2l,f,c
  1075  000886  500F               	movf	(memset@s+1)^0,w,c
  1076  000888  22DA               	addwfc	fsr2h,f,c
  1077  00088A  C006  FFDF         	movff	memset@c,indf2
  1078  00088E  EE20 F002          	lfsr	2,2
  1079  000892  500E               	movf	memset@s^0,w,c
  1080  000894  26D9               	addwf	fsr2l,f,c
  1081  000896  500F               	movf	(memset@s+1)^0,w,c
  1082  000898  22DA               	addwfc	fsr2h,f,c
  1083  00089A  C006  FFDF         	movff	memset@c,indf2
  1084  00089E  5008               	movf	memset@n^0,w,c
  1085  0008A0  240E               	addwf	memset@s^0,w,c
  1086  0008A2  6E0A               	movwf	??_memset^0,c
  1087  0008A4  5009               	movf	(memset@n+1)^0,w,c
  1088  0008A6  200F               	addwfc	(memset@s+1)^0,w,c
  1089  0008A8  6E0B               	movwf	(??_memset+1)^0,c
  1090  0008AA  0EFE               	movlw	254
  1091  0008AC  240A               	addwf	??_memset^0,w,c
  1092  0008AE  6ED9               	movwf	fsr2l,c
  1093  0008B0  0EFF               	movlw	255
  1094  0008B2  200B               	addwfc	(??_memset+1)^0,w,c
  1095  0008B4  6EDA               	movwf	fsr2h,c
  1096  0008B6  C006  FFDF         	movff	memset@c,indf2
  1097  0008BA  5008               	movf	memset@n^0,w,c
  1098  0008BC  240E               	addwf	memset@s^0,w,c
  1099  0008BE  6E0A               	movwf	??_memset^0,c
  1100  0008C0  5009               	movf	(memset@n+1)^0,w,c
  1101  0008C2  200F               	addwfc	(memset@s+1)^0,w,c
  1102  0008C4  6E0B               	movwf	(??_memset+1)^0,c
  1103  0008C6  0EFD               	movlw	253
  1104  0008C8  240A               	addwf	??_memset^0,w,c
  1105  0008CA  6ED9               	movwf	fsr2l,c
  1106  0008CC  0EFF               	movlw	255
  1107  0008CE  200B               	addwfc	(??_memset+1)^0,w,c
  1108  0008D0  6EDA               	movwf	fsr2h,c
  1109  0008D2  C006  FFDF         	movff	memset@c,indf2
  1110  0008D6  5009               	movf	(memset@n+1)^0,w,c
  1111  0008D8  E107               	bnz	u591
  1112  0008DA  0E07               	movlw	7
  1113  0008DC  5C08               	subwf	memset@n^0,w,c
  1114  0008DE  B0D8               	btfsc	status,0,c
  1115  0008E0  EF74  F004         	goto	u591
  1116  0008E4  EF76  F004         	goto	u590
  1117  0008E8                     u591:
  1118  0008E8  EF78  F004         	goto	l1174
  1119  0008EC                     u590:
  1120  0008EC  EFC9  F004         	goto	l781
  1121  0008F0                     l1174:
  1122  0008F0  EE20 F003          	lfsr	2,3
  1123  0008F4  500E               	movf	memset@s^0,w,c
  1124  0008F6  26D9               	addwf	fsr2l,f,c
  1125  0008F8  500F               	movf	(memset@s+1)^0,w,c
  1126  0008FA  22DA               	addwfc	fsr2h,f,c
  1127  0008FC  C006  FFDF         	movff	memset@c,indf2
  1128  000900  5008               	movf	memset@n^0,w,c
  1129  000902  240E               	addwf	memset@s^0,w,c
  1130  000904  6E0A               	movwf	??_memset^0,c
  1131  000906  5009               	movf	(memset@n+1)^0,w,c
  1132  000908  200F               	addwfc	(memset@s+1)^0,w,c
  1133  00090A  6E0B               	movwf	(??_memset+1)^0,c
  1134  00090C  0EFC               	movlw	252
  1135  00090E  240A               	addwf	??_memset^0,w,c
  1136  000910  6ED9               	movwf	fsr2l,c
  1137  000912  0EFF               	movlw	255
  1138  000914  200B               	addwfc	(??_memset+1)^0,w,c
  1139  000916  6EDA               	movwf	fsr2h,c
  1140  000918  C006  FFDF         	movff	memset@c,indf2
  1141  00091C  5009               	movf	(memset@n+1)^0,w,c
  1142  00091E  E107               	bnz	u601
  1143  000920  0E09               	movlw	9
  1144  000922  5C08               	subwf	memset@n^0,w,c
  1145  000924  B0D8               	btfsc	status,0,c
  1146  000926  EF97  F004         	goto	u601
  1147  00092A  EF99  F004         	goto	u600
  1148  00092E                     u601:
  1149  00092E  EF9B  F004         	goto	l1180
  1150  000932                     u600:
  1151  000932  EFC9  F004         	goto	l781
  1152  000936                     l1180:
  1153  000936  C00E  F00A         	movff	memset@s,??_memset
  1154  00093A  C00F  F00B         	movff	memset@s+1,??_memset+1
  1155  00093E  1E0A               	comf	??_memset^0,f,c
  1156  000940  1E0B               	comf	(??_memset+1)^0,f,c
  1157  000942  4A0A               	infsnz	??_memset^0,f,c
  1158  000944  2A0B               	incf	(??_memset+1)^0,f,c
  1159  000946  0E03               	movlw	3
  1160  000948  140A               	andwf	??_memset^0,w,c
  1161  00094A  6E0C               	movwf	memset@k^0,c
  1162  00094C  6A0D               	clrf	(memset@k+1)^0,c
  1163  00094E  500C               	movf	memset@k^0,w,c
  1164  000950  260E               	addwf	memset@s^0,f,c
  1165  000952  500D               	movf	(memset@k+1)^0,w,c
  1166  000954  220F               	addwfc	(memset@s+1)^0,f,c
  1167  000956  500C               	movf	memset@k^0,w,c
  1168  000958  5E08               	subwf	memset@n^0,f,c
  1169  00095A  500D               	movf	(memset@k+1)^0,w,c
  1170  00095C  5A09               	subwfb	(memset@n+1)^0,f,c
  1171  00095E  0EFC               	movlw	252
  1172  000960  1608               	andwf	memset@n^0,f,c
  1173  000962  0EFF               	movlw	255
  1174  000964  1609               	andwf	(memset@n+1)^0,f,c
  1175  000966  EFC0  F004         	goto	l1188
  1176  00096A                     l1182:
  1177  00096A  C00E  FFD9         	movff	memset@s,fsr2l
  1178  00096E  C00F  FFDA         	movff	memset@s+1,fsr2h
  1179  000972  C006  FFDF         	movff	memset@c,indf2
  1180  000976  0608               	decf	memset@n^0,f,c
  1181  000978  A0D8               	btfss	status,0,c
  1182  00097A  0609               	decf	(memset@n+1)^0,f,c
  1183  00097C  4A0E               	infsnz	memset@s^0,f,c
  1184  00097E  2A0F               	incf	(memset@s+1)^0,f,c
  1185  000980                     l1188:
  1186  000980  5008               	movf	memset@n^0,w,c
  1187  000982  1009               	iorwf	(memset@n+1)^0,w,c
  1188  000984  A4D8               	btfss	status,2,c
  1189  000986  EFC7  F004         	goto	u611
  1190  00098A  EFC9  F004         	goto	u610
  1191  00098E                     u611:
  1192  00098E  EFB5  F004         	goto	l1182
  1193  000992                     u610:
  1194  000992                     l781:
  1195  000992  0012               	return		;funcret
  1196  000994                     __end_of_memset:
  1197                           	callstack 0
  1198                           
  1199 ;; *************** function _UART_Write_Text *****************
  1200 ;; Defined at:
  1201 ;;		line 44 in file "UART_LIB.c"
  1202 ;; Parameters:    Size  Location     Type
  1203 ;;  text            2    4[COMRAM] PTR unsigned char 
  1204 ;;		 -> STR_6(12), 
  1205 ;; Auto vars:     Size  Location     Type
  1206 ;;		None
  1207 ;; Return value:  Size  Location     Type
  1208 ;;                  1    wreg      void 
  1209 ;; Registers used:
  1210 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1211 ;; Tracked objects:
  1212 ;;		On entry : 0/0
  1213 ;;		On exit  : 0/0
  1214 ;;		Unchanged: 0/0
  1215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1216 ;;      Params:         2       0       0       0       0       0       0       0       0
  1217 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1218 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1219 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1220 ;;Total ram usage:        2 bytes
  1221 ;; Hardware stack levels used: 1
  1222 ;; Hardware stack levels required when called: 3
  1223 ;; This function calls:
  1224 ;;		_UART_Write_Chr
  1225 ;; This function is called by:
  1226 ;;		_main
  1227 ;; This function uses a non-reentrant model
  1228 ;;
  1229                           
  1230                           	psect	text6
  1231  000ECE                     __ptext6:
  1232                           	callstack 0
  1233  000ECE                     _UART_Write_Text:
  1234                           	callstack 27
  1235  000ECE                     
  1236                           ;UART_LIB.c: 45:     while(*text){
  1237  000ECE  EF73  F007         	goto	l1196
  1238  000ED2                     l1192:
  1239                           
  1240                           ;UART_LIB.c: 46:         UART_Write_Chr(*text);
  1241  000ED2  C005  FFF6         	movff	UART_Write_Text@text,tblptrl
  1242  000ED6  C006  FFF7         	movff	UART_Write_Text@text+1,tblptrh
  1243  000EDA                     	if	0	;tblptru may be non-zero
  1244  000EDA                     	endif
  1245  000EDA                     	if	0	;tblptru may be non-zero
  1246  000EDA                     	endif
  1247  000EDA  0008               	tblrd		*
  1248  000EDC  50F5               	movf	tablat,w,c
  1249  000EDE  EC9B  F007         	call	_UART_Write_Chr
  1250  000EE2                     
  1251                           ;UART_LIB.c: 47:         text++;
  1252  000EE2  4A05               	infsnz	UART_Write_Text@text^0,f,c
  1253  000EE4  2A06               	incf	(UART_Write_Text@text+1)^0,f,c
  1254  000EE6                     l1196:
  1255                           
  1256                           ;UART_LIB.c: 45:     while(*text){
  1257  000EE6  C005  FFF6         	movff	UART_Write_Text@text,tblptrl
  1258  000EEA  C006  FFF7         	movff	UART_Write_Text@text+1,tblptrh
  1259  000EEE                     	if	0	;tblptru may be non-zero
  1260  000EEE                     	endif
  1261  000EEE                     	if	0	;tblptru may be non-zero
  1262  000EEE                     	endif
  1263  000EEE  0008               	tblrd		*
  1264  000EF0  50F5               	movf	tablat,w,c
  1265  000EF2  0900               	iorlw	0
  1266  000EF4  A4D8               	btfss	status,2,c
  1267  000EF6  EF7F  F007         	goto	u621
  1268  000EFA  EF81  F007         	goto	u620
  1269  000EFE                     u621:
  1270  000EFE  EF69  F007         	goto	l1192
  1271  000F02                     u620:
  1272  000F02  0012               	return		;funcret
  1273  000F04                     __end_of_UART_Write_Text:
  1274                           	callstack 0
  1275                           
  1276 ;; *************** function _UART_Write_Chr *****************
  1277 ;; Defined at:
  1278 ;;		line 40 in file "UART_LIB.c"
  1279 ;; Parameters:    Size  Location     Type
  1280 ;;  letter          1    wreg     unsigned char 
  1281 ;; Auto vars:     Size  Location     Type
  1282 ;;  letter          1    3[COMRAM] unsigned char 
  1283 ;; Return value:  Size  Location     Type
  1284 ;;                  1    wreg      void 
  1285 ;; Registers used:
  1286 ;;		wreg
  1287 ;; Tracked objects:
  1288 ;;		On entry : 0/0
  1289 ;;		On exit  : 0/0
  1290 ;;		Unchanged: 0/0
  1291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1292 ;;      Params:         0       0       0       0       0       0       0       0       0
  1293 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1294 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1295 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1296 ;;Total ram usage:        1 bytes
  1297 ;; Hardware stack levels used: 1
  1298 ;; Hardware stack levels required when called: 2
  1299 ;; This function calls:
  1300 ;;		Nothing
  1301 ;; This function is called by:
  1302 ;;		_UART_Write_Text
  1303 ;; This function uses a non-reentrant model
  1304 ;;
  1305                           
  1306                           	psect	text7
  1307  000F36                     __ptext7:
  1308                           	callstack 0
  1309  000F36                     _UART_Write_Chr:
  1310                           	callstack 27
  1311                           
  1312                           ;incstack = 0
  1313                           ;UART_Write_Chr@letter stored from wreg
  1314  000F36  6E04               	movwf	UART_Write_Chr@letter^0,c
  1315  000F38                     l88:
  1316  000F38  A2AC               	btfss	172,1,c	;volatile
  1317  000F3A  EFA1  F007         	goto	u351
  1318  000F3E  EFA3  F007         	goto	u350
  1319  000F42                     u351:
  1320  000F42  EF9C  F007         	goto	l88
  1321  000F46                     u350:
  1322  000F46                     
  1323                           ;UART_LIB.c: 42:     TXREG = letter;
  1324  000F46  C004  FFAD         	movff	UART_Write_Chr@letter,4013	;volatile
  1325  000F4A  0012               	return		;funcret
  1326  000F4C                     __end_of_UART_Write_Chr:
  1327                           	callstack 0
  1328                           
  1329 ;; *************** function _UART_Init *****************
  1330 ;; Defined at:
  1331 ;;		line 5 in file "UART_LIB.c"
  1332 ;; Parameters:    Size  Location     Type
  1333 ;;  config          8   16[COMRAM] struct .
  1334 ;; Auto vars:     Size  Location     Type
  1335 ;;  spbrg_val       4   28[COMRAM] unsigned long 
  1336 ;; Return value:  Size  Location     Type
  1337 ;;                  1    wreg      void 
  1338 ;; Registers used:
  1339 ;;		wreg, status,2, status,0, cstack
  1340 ;; Tracked objects:
  1341 ;;		On entry : 0/0
  1342 ;;		On exit  : 0/0
  1343 ;;		Unchanged: 0/0
  1344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1345 ;;      Params:         8       0       0       0       0       0       0       0       0
  1346 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1347 ;;      Temps:          4       0       0       0       0       0       0       0       0
  1348 ;;      Totals:        16       0       0       0       0       0       0       0       0
  1349 ;;Total ram usage:       16 bytes
  1350 ;; Hardware stack levels used: 1
  1351 ;; Hardware stack levels required when called: 3
  1352 ;; This function calls:
  1353 ;;		___lldiv
  1354 ;; This function is called by:
  1355 ;;		_main
  1356 ;; This function uses a non-reentrant model
  1357 ;;
  1358                           
  1359                           	psect	text8
  1360  000A84                     __ptext8:
  1361                           	callstack 0
  1362  000A84                     _UART_Init:
  1363                           	callstack 27
  1364  000A84                     
  1365                           ;UART_LIB.c: 7:     unsigned long spbrg_val = (20000000UL / (16 * config.baud_rate)) - 1
      +                          ;
  1366  000A84  0E00               	movlw	0
  1367  000A86  6E04               	movwf	___lldiv@dividend^0,c
  1368  000A88  0E2D               	movlw	45
  1369  000A8A  6E05               	movwf	(___lldiv@dividend+1)^0,c
  1370  000A8C  0E31               	movlw	49
  1371  000A8E  6E06               	movwf	(___lldiv@dividend+2)^0,c
  1372  000A90  0E01               	movlw	1
  1373  000A92  6E07               	movwf	(___lldiv@dividend+3)^0,c
  1374  000A94  C011  F019         	movff	UART_Init@config,??_UART_Init
  1375  000A98  C012  F01A         	movff	UART_Init@config+1,??_UART_Init+1
  1376  000A9C  C013  F01B         	movff	UART_Init@config+2,??_UART_Init+2
  1377  000AA0  C014  F01C         	movff	UART_Init@config+3,??_UART_Init+3
  1378  000AA4  0E04               	movlw	4
  1379  000AA6                     u485:
  1380  000AA6  90D8               	bcf	status,0,c
  1381  000AA8  3619               	rlcf	??_UART_Init^0,f,c
  1382  000AAA  361A               	rlcf	(??_UART_Init+1)^0,f,c
  1383  000AAC  361B               	rlcf	(??_UART_Init+2)^0,f,c
  1384  000AAE  361C               	rlcf	(??_UART_Init+3)^0,f,c
  1385  000AB0  2EE8               	decfsz	wreg,f,c
  1386  000AB2  EF53  F005         	goto	u485
  1387  000AB6  C019  F008         	movff	??_UART_Init,___lldiv@divisor
  1388  000ABA  C01A  F009         	movff	??_UART_Init+1,___lldiv@divisor+1
  1389  000ABE  C01B  F00A         	movff	??_UART_Init+2,___lldiv@divisor+2
  1390  000AC2  C01C  F00B         	movff	??_UART_Init+3,___lldiv@divisor+3
  1391  000AC6  EC81  F006         	call	___lldiv	;wreg free
  1392  000ACA  0EFF               	movlw	255
  1393  000ACC  2404               	addwf	?___lldiv^0,w,c
  1394  000ACE  6E1D               	movwf	UART_Init@spbrg_val^0,c
  1395  000AD0  0EFF               	movlw	255
  1396  000AD2  2005               	addwfc	(?___lldiv+1)^0,w,c
  1397  000AD4  6E1E               	movwf	(UART_Init@spbrg_val+1)^0,c
  1398  000AD6  0EFF               	movlw	255
  1399  000AD8  2006               	addwfc	(?___lldiv+2)^0,w,c
  1400  000ADA  6E1F               	movwf	(UART_Init@spbrg_val+2)^0,c
  1401  000ADC  0EFF               	movlw	255
  1402  000ADE  2007               	addwfc	(?___lldiv+3)^0,w,c
  1403  000AE0  6E20               	movwf	(UART_Init@spbrg_val+3)^0,c
  1404  000AE2                     
  1405                           ;UART_LIB.c: 8:     SPBRG = (unsigned char)(spbrg_val);
  1406  000AE2  C01D  FFAF         	movff	UART_Init@spbrg_val,4015	;volatile
  1407  000AE6                     
  1408                           ;UART_LIB.c: 11:     TXSTA = 0x24;
  1409  000AE6  0E24               	movlw	36
  1410  000AE8  6EAC               	movwf	172,c	;volatile
  1411  000AEA                     
  1412                           ;UART_LIB.c: 12:     RCSTA = 0x90;
  1413  000AEA  0E90               	movlw	144
  1414  000AEC  6EAB               	movwf	171,c	;volatile
  1415  000AEE                     
  1416                           ;UART_LIB.c: 15:     TX9 = config.data_bits == 9 ? 1 : 0;
  1417  000AEE  0E09               	movlw	9
  1418  000AF0  1815               	xorwf	(UART_Init@config+4)^0,w,c
  1419  000AF2  B4D8               	btfsc	status,2,c
  1420  000AF4  EF7E  F005         	goto	u491
  1421  000AF8  EF81  F005         	goto	u490
  1422  000AFC                     u491:
  1423  000AFC  8CAC               	bsf	4012,6,c	;volatile
  1424  000AFE  EF82  F005         	goto	u505
  1425  000B02                     u490:
  1426  000B02  9CAC               	bcf	4012,6,c	;volatile
  1427  000B04                     u505:
  1428  000B04                     
  1429                           ;UART_LIB.c: 16:     RX9 = config.data_bits == 9 ? 1 : 0;
  1430  000B04  0E09               	movlw	9
  1431  000B06  1815               	xorwf	(UART_Init@config+4)^0,w,c
  1432  000B08  B4D8               	btfsc	status,2,c
  1433  000B0A  EF89  F005         	goto	u511
  1434  000B0E  EF8C  F005         	goto	u510
  1435  000B12                     u511:
  1436  000B12  8CAB               	bsf	4011,6,c	;volatile
  1437  000B14  EF8D  F005         	goto	u525
  1438  000B18                     u510:
  1439  000B18  9CAB               	bcf	4011,6,c	;volatile
  1440  000B1A                     u525:
  1441  000B1A                     
  1442                           ;UART_LIB.c: 17:     TXEN = 1;
  1443  000B1A  8AAC               	bsf	4012,5,c	;volatile
  1444  000B1C                     
  1445                           ;UART_LIB.c: 18:     SYNC = 0;
  1446  000B1C  98AC               	bcf	4012,4,c	;volatile
  1447  000B1E                     
  1448                           ;UART_LIB.c: 19:     SPEN = 1;
  1449  000B1E  8EAB               	bsf	4011,7,c	;volatile
  1450                           
  1451                           ;UART_LIB.c: 22:     switch (config.parity) {
  1452  000B20  EFA0  F005         	goto	l1132
  1453  000B24                     l81:
  1454                           
  1455                           ;UART_LIB.c: 24:             BRGH = 1;
  1456  000B24  84AC               	bsf	4012,2,c	;volatile
  1457                           
  1458                           ;UART_LIB.c: 25:             TX9D = 0;
  1459  000B26  90AC               	bcf	4012,0,c	;volatile
  1460  000B28                     l1124:
  1461                           
  1462                           ;UART_LIB.c: 26:             RCSTA |= 0x02;
  1463  000B28  82AB               	bsf	171,1,c	;volatile
  1464                           
  1465                           ;UART_LIB.c: 27:             break;
  1466  000B2A  EFB5  F005         	goto	l85
  1467  000B2E                     l83:
  1468                           
  1469                           ;UART_LIB.c: 29:             BRGH = 1;
  1470  000B2E  84AC               	bsf	4012,2,c	;volatile
  1471                           
  1472                           ;UART_LIB.c: 30:             TX9D = 1;
  1473  000B30  80AC               	bsf	4012,0,c	;volatile
  1474  000B32  EF94  F005         	goto	l1124
  1475  000B36                     l84:
  1476                           
  1477                           ;UART_LIB.c: 34:             BRGH = 1;
  1478  000B36  84AC               	bsf	4012,2,c	;volatile
  1479                           
  1480                           ;UART_LIB.c: 35:             TX9D = 0;
  1481  000B38  90AC               	bcf	4012,0,c	;volatile
  1482  000B3A                     
  1483                           ;UART_LIB.c: 36:             RCSTA &= ~0x02;
  1484  000B3A  92AB               	bcf	171,1,c	;volatile
  1485                           
  1486                           ;UART_LIB.c: 37:             break;
  1487  000B3C  EFB5  F005         	goto	l85
  1488  000B40                     l1132:
  1489  000B40  5016               	movf	(UART_Init@config+5)^0,w,c
  1490  000B42  6E19               	movwf	??_UART_Init^0,c
  1491  000B44  6A1A               	clrf	(??_UART_Init+1)^0,c
  1492                           
  1493                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1494                           ; Switch size 1, requested type "simple"
  1495                           ; Number of cases is 1, Range of values is 0 to 0
  1496                           ; switch strategies available:
  1497                           ; Name         Instructions Cycles
  1498                           ; simple_byte            4     3 (average)
  1499                           ;	Chosen strategy is simple_byte
  1500  000B46  501A               	movf	(??_UART_Init+1)^0,w,c
  1501  000B48  0A00               	xorlw	0	; case 0
  1502  000B4A  B4D8               	btfsc	status,2,c
  1503  000B4C  EFAA  F005         	goto	l1238
  1504  000B50  EF9B  F005         	goto	l84
  1505  000B54                     l1238:
  1506                           
  1507                           ; Switch size 1, requested type "simple"
  1508                           ; Number of cases is 2, Range of values is 1 to 2
  1509                           ; switch strategies available:
  1510                           ; Name         Instructions Cycles
  1511                           ; simple_byte            7     4 (average)
  1512                           ;	Chosen strategy is simple_byte
  1513  000B54  5019               	movf	??_UART_Init^0,w,c
  1514  000B56  0A01               	xorlw	1	; case 1
  1515  000B58  B4D8               	btfsc	status,2,c
  1516  000B5A  EF92  F005         	goto	l81
  1517  000B5E  0A03               	xorlw	3	; case 2
  1518  000B60  B4D8               	btfsc	status,2,c
  1519  000B62  EF97  F005         	goto	l83
  1520  000B66  EF9B  F005         	goto	l84
  1521  000B6A                     l85:
  1522  000B6A  0012               	return		;funcret
  1523  000B6C                     __end_of_UART_Init:
  1524                           	callstack 0
  1525                           
  1526 ;; *************** function ___lldiv *****************
  1527 ;; Defined at:
  1528 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\__lldiv.c"
  1529 ;; Parameters:    Size  Location     Type
  1530 ;;  dividend        4    3[COMRAM] unsigned long 
  1531 ;;  divisor         4    7[COMRAM] unsigned long 
  1532 ;; Auto vars:     Size  Location     Type
  1533 ;;  quotient        4   11[COMRAM] unsigned long 
  1534 ;;  counter         1   15[COMRAM] unsigned char 
  1535 ;; Return value:  Size  Location     Type
  1536 ;;                  4    3[COMRAM] unsigned long 
  1537 ;; Registers used:
  1538 ;;		wreg, status,2, status,0
  1539 ;; Tracked objects:
  1540 ;;		On entry : 0/0
  1541 ;;		On exit  : 0/0
  1542 ;;		Unchanged: 0/0
  1543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1544 ;;      Params:         8       0       0       0       0       0       0       0       0
  1545 ;;      Locals:         5       0       0       0       0       0       0       0       0
  1546 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1547 ;;      Totals:        13       0       0       0       0       0       0       0       0
  1548 ;;Total ram usage:       13 bytes
  1549 ;; Hardware stack levels used: 1
  1550 ;; Hardware stack levels required when called: 2
  1551 ;; This function calls:
  1552 ;;		Nothing
  1553 ;; This function is called by:
  1554 ;;		_UART_Init
  1555 ;; This function uses a non-reentrant model
  1556 ;;
  1557                           
  1558                           	psect	text9
  1559  000D02                     __ptext9:
  1560                           	callstack 0
  1561  000D02                     ___lldiv:
  1562                           	callstack 27
  1563  000D02  0E00               	movlw	0
  1564  000D04  6E0C               	movwf	___lldiv@quotient^0,c
  1565  000D06  0E00               	movlw	0
  1566  000D08  6E0D               	movwf	(___lldiv@quotient+1)^0,c
  1567  000D0A  0E00               	movlw	0
  1568  000D0C  6E0E               	movwf	(___lldiv@quotient+2)^0,c
  1569  000D0E  0E00               	movlw	0
  1570  000D10  6E0F               	movwf	(___lldiv@quotient+3)^0,c
  1571  000D12  5008               	movf	___lldiv@divisor^0,w,c
  1572  000D14  1009               	iorwf	(___lldiv@divisor+1)^0,w,c
  1573  000D16  100A               	iorwf	(___lldiv@divisor+2)^0,w,c
  1574  000D18  100B               	iorwf	(___lldiv@divisor+3)^0,w,c
  1575  000D1A  B4D8               	btfsc	status,2,c
  1576  000D1C  EF92  F006         	goto	u361
  1577  000D20  EF94  F006         	goto	u360
  1578  000D24                     u361:
  1579  000D24  EFCA  F006         	goto	l133
  1580  000D28                     u360:
  1581  000D28  0E01               	movlw	1
  1582  000D2A  6E10               	movwf	___lldiv@counter^0,c
  1583  000D2C  EF9E  F006         	goto	l1044
  1584  000D30                     l1042:
  1585  000D30  90D8               	bcf	status,0,c
  1586  000D32  3608               	rlcf	___lldiv@divisor^0,f,c
  1587  000D34  3609               	rlcf	(___lldiv@divisor+1)^0,f,c
  1588  000D36  360A               	rlcf	(___lldiv@divisor+2)^0,f,c
  1589  000D38  360B               	rlcf	(___lldiv@divisor+3)^0,f,c
  1590  000D3A  2A10               	incf	___lldiv@counter^0,f,c
  1591  000D3C                     l1044:
  1592  000D3C  AE0B               	btfss	(___lldiv@divisor+3)^0,7,c
  1593  000D3E  EFA3  F006         	goto	u371
  1594  000D42  EFA5  F006         	goto	u370
  1595  000D46                     u371:
  1596  000D46  EF98  F006         	goto	l1042
  1597  000D4A                     u370:
  1598  000D4A                     l1046:
  1599  000D4A  90D8               	bcf	status,0,c
  1600  000D4C  360C               	rlcf	___lldiv@quotient^0,f,c
  1601  000D4E  360D               	rlcf	(___lldiv@quotient+1)^0,f,c
  1602  000D50  360E               	rlcf	(___lldiv@quotient+2)^0,f,c
  1603  000D52  360F               	rlcf	(___lldiv@quotient+3)^0,f,c
  1604  000D54  5008               	movf	___lldiv@divisor^0,w,c
  1605  000D56  5C04               	subwf	___lldiv@dividend^0,w,c
  1606  000D58  5009               	movf	(___lldiv@divisor+1)^0,w,c
  1607  000D5A  5805               	subwfb	(___lldiv@dividend+1)^0,w,c
  1608  000D5C  500A               	movf	(___lldiv@divisor+2)^0,w,c
  1609  000D5E  5806               	subwfb	(___lldiv@dividend+2)^0,w,c
  1610  000D60  500B               	movf	(___lldiv@divisor+3)^0,w,c
  1611  000D62  5807               	subwfb	(___lldiv@dividend+3)^0,w,c
  1612  000D64  A0D8               	btfss	status,0,c
  1613  000D66  EFB7  F006         	goto	u381
  1614  000D6A  EFB9  F006         	goto	u380
  1615  000D6E                     u381:
  1616  000D6E  EFC2  F006         	goto	l1054
  1617  000D72                     u380:
  1618  000D72  5008               	movf	___lldiv@divisor^0,w,c
  1619  000D74  5E04               	subwf	___lldiv@dividend^0,f,c
  1620  000D76  5009               	movf	(___lldiv@divisor+1)^0,w,c
  1621  000D78  5A05               	subwfb	(___lldiv@dividend+1)^0,f,c
  1622  000D7A  500A               	movf	(___lldiv@divisor+2)^0,w,c
  1623  000D7C  5A06               	subwfb	(___lldiv@dividend+2)^0,f,c
  1624  000D7E  500B               	movf	(___lldiv@divisor+3)^0,w,c
  1625  000D80  5A07               	subwfb	(___lldiv@dividend+3)^0,f,c
  1626  000D82  800C               	bsf	___lldiv@quotient^0,0,c
  1627  000D84                     l1054:
  1628  000D84  90D8               	bcf	status,0,c
  1629  000D86  320B               	rrcf	(___lldiv@divisor+3)^0,f,c
  1630  000D88  320A               	rrcf	(___lldiv@divisor+2)^0,f,c
  1631  000D8A  3209               	rrcf	(___lldiv@divisor+1)^0,f,c
  1632  000D8C  3208               	rrcf	___lldiv@divisor^0,f,c
  1633  000D8E  2E10               	decfsz	___lldiv@counter^0,f,c
  1634  000D90  EFA5  F006         	goto	l1046
  1635  000D94                     l133:
  1636  000D94  C00C  F004         	movff	___lldiv@quotient,?___lldiv
  1637  000D98  C00D  F005         	movff	___lldiv@quotient+1,?___lldiv+1
  1638  000D9C  C00E  F006         	movff	___lldiv@quotient+2,?___lldiv+2
  1639  000DA0  C00F  F007         	movff	___lldiv@quotient+3,?___lldiv+3
  1640  000DA4  0012               	return		;funcret
  1641  000DA6                     __end_of___lldiv:
  1642                           	callstack 0
  1643                           
  1644 ;; *************** function _appLedRxData *****************
  1645 ;; Defined at:
  1646 ;;		line 12 in file "main.c"
  1647 ;; Parameters:    Size  Location     Type
  1648 ;;		None
  1649 ;; Auto vars:     Size  Location     Type
  1650 ;;		None
  1651 ;; Return value:  Size  Location     Type
  1652 ;;                  1    wreg      void 
  1653 ;; Registers used:
  1654 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1655 ;; Tracked objects:
  1656 ;;		On entry : 0/0
  1657 ;;		On exit  : 0/0
  1658 ;;		Unchanged: 0/0
  1659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1660 ;;      Params:         0       0       0       0       0       0       0       0       0
  1661 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1662 ;;      Temps:          3       0       0       0       0       0       0       0       0
  1663 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1664 ;;Total ram usage:        3 bytes
  1665 ;; Hardware stack levels used: 1
  1666 ;; Hardware stack levels required when called: 1
  1667 ;; This function calls:
  1668 ;;		_UART_Read
  1669 ;; This function is called by:
  1670 ;;		Interrupt level 2
  1671 ;; This function uses a non-reentrant model
  1672 ;;
  1673                           
  1674                           	psect	intcode
  1675  000008                     __pintcode:
  1676                           	callstack 0
  1677  000008                     _appLedRxData:
  1678                           	callstack 27
  1679                           
  1680                           ;incstack = 0
  1681  000008  822F               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  1682  00000A  EDD3  F006         	call	int_func,f	;refresh shadow registers
  1683                           
  1684                           	psect	intcode_body
  1685  000DA6                     __pintcode_body:
  1686                           	callstack 27
  1687  000DA6                     int_func:
  1688                           	callstack 27
  1689  000DA6  0006               	pop		; remove dummy address from shadow register refresh
  1690  000DA8  CFD9 F002          	movff	fsr2l,??_appLedRxData+1
  1691  000DAC  CFDA F003          	movff	fsr2h,??_appLedRxData+2
  1692  000DB0                     
  1693                           ;main.c: 14:     if(PIR1bits.RC1IF == 1){
  1694  000DB0  AA9E               	btfss	158,5,c	;volatile
  1695  000DB2  EFDD  F006         	goto	i2u63_41
  1696  000DB6  EFDF  F006         	goto	i2u63_40
  1697  000DBA                     i2u63_41:
  1698  000DBA  EFFB  F006         	goto	i2l37
  1699  000DBE                     i2u63_40:
  1700  000DBE                     
  1701                           ;main.c: 15:         strRx[indexRx] = UART_Read();
  1702  000DBE  0E60               	movlw	low _strRx
  1703  000DC0  242B               	addwf	_indexRx^0,w,c
  1704  000DC2  6ED9               	movwf	fsr2l,c
  1705  000DC4  0E00               	movlw	high _strRx
  1706  000DC6  202C               	addwfc	(_indexRx+1)^0,w,c
  1707  000DC8  6EDA               	movwf	fsr2h,c
  1708  000DCA  ECA6  F007         	call	_UART_Read	;wreg free
  1709  000DCE  6EDF               	movwf	indf2,c
  1710  000DD0                     
  1711                           ;main.c: 16:         if( strRx[indexRx]== '#' ){
  1712  000DD0  0E60               	movlw	low _strRx
  1713  000DD2  242B               	addwf	_indexRx^0,w,c
  1714  000DD4  6ED9               	movwf	fsr2l,c
  1715  000DD6  0E00               	movlw	high _strRx
  1716  000DD8  202C               	addwfc	(_indexRx+1)^0,w,c
  1717  000DDA  6EDA               	movwf	fsr2h,c
  1718  000DDC  0E23               	movlw	35
  1719  000DDE  18DE               	xorwf	postinc2,w,c
  1720  000DE0  A4D8               	btfss	status,2,c
  1721  000DE2  EFF5  F006         	goto	i2u64_41
  1722  000DE6  EFF7  F006         	goto	i2u64_40
  1723  000DEA                     i2u64_41:
  1724  000DEA  EFF9  F006         	goto	i2l1206
  1725  000DEE                     i2u64_40:
  1726  000DEE                     
  1727                           ;main.c: 17:             interpretarFlag = 1;
  1728  000DEE  0E01               	movlw	1
  1729  000DF0  6E2D               	movwf	_interpretarFlag^0,c
  1730  000DF2                     i2l1206:
  1731                           
  1732                           ;main.c: 19:         indexRx++;
  1733  000DF2  4A2B               	infsnz	_indexRx^0,f,c
  1734  000DF4  2A2C               	incf	(_indexRx+1)^0,f,c
  1735  000DF6                     i2l37:
  1736  000DF6  C003  FFDA         	movff	??_appLedRxData+2,fsr2h
  1737  000DFA  C002  FFD9         	movff	??_appLedRxData+1,fsr2l
  1738  000DFE  922F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1739  000E00  0011               	retfie		f
  1740  000E02                     __end_of_appLedRxData:
  1741                           	callstack 0
  1742                           
  1743 ;; *************** function _UART_Read *****************
  1744 ;; Defined at:
  1745 ;;		line 50 in file "UART_LIB.c"
  1746 ;; Parameters:    Size  Location     Type
  1747 ;;		None
  1748 ;; Auto vars:     Size  Location     Type
  1749 ;;		None
  1750 ;; Return value:  Size  Location     Type
  1751 ;;                  1    wreg      unsigned char 
  1752 ;; Registers used:
  1753 ;;		wreg, status,2
  1754 ;; Tracked objects:
  1755 ;;		On entry : 0/0
  1756 ;;		On exit  : 0/0
  1757 ;;		Unchanged: 0/0
  1758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1759 ;;      Params:         0       0       0       0       0       0       0       0       0
  1760 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1761 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1762 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1763 ;;Total ram usage:        0 bytes
  1764 ;; Hardware stack levels used: 1
  1765 ;; This function calls:
  1766 ;;		Nothing
  1767 ;; This function is called by:
  1768 ;;		_appLedRxData
  1769 ;; This function uses a non-reentrant model
  1770 ;;
  1771                           
  1772                           	psect	text11
  1773  000F4C                     __ptext11:
  1774                           	callstack 0
  1775  000F4C                     _UART_Read:
  1776                           	callstack 27
  1777  000F4C                     i2l100:
  1778  000F4C  AA9E               	btfss	158,5,c	;volatile
  1779  000F4E  EFAB  F007         	goto	i2u47_41
  1780  000F52  EFAD  F007         	goto	i2u47_40
  1781  000F56                     i2u47_41:
  1782  000F56  EFA6  F007         	goto	i2l100
  1783  000F5A                     i2u47_40:
  1784  000F5A                     
  1785                           ;UART_LIB.c: 52:     return RCREG;
  1786  000F5A  50AE               	movf	174,w,c	;volatile
  1787  000F5C  0012               	return		;funcret
  1788  000F5E                     __end_of_UART_Read:
  1789                           	callstack 0
  1790                           
  1791                           	psect	rparam
  1792  0000                     
  1793                           	psect	temp
  1794  00002F                     btemp:
  1795                           	callstack 0
  1796  00002F                     	ds	1
  1797  0000                     int$flags	set	btemp
  1798  0000                     wtemp8	set	btemp+1
  1799  0000                     ttemp5	set	btemp+1
  1800  0000                     ttemp6	set	btemp+4
  1801  0000                     ttemp7	set	btemp+8
  1802                           
  1803                           	psect	idloc
  1804                           
  1805                           ;Config register IDLOC0 @ 0x200000
  1806                           ;	unspecified, using default values
  1807  200000                     	org	2097152
  1808  200000  FF                 	db	255
  1809                           
  1810                           ;Config register IDLOC1 @ 0x200001
  1811                           ;	unspecified, using default values
  1812  200001                     	org	2097153
  1813  200001  FF                 	db	255
  1814                           
  1815                           ;Config register IDLOC2 @ 0x200002
  1816                           ;	unspecified, using default values
  1817  200002                     	org	2097154
  1818  200002  FF                 	db	255
  1819                           
  1820                           ;Config register IDLOC3 @ 0x200003
  1821                           ;	unspecified, using default values
  1822  200003                     	org	2097155
  1823  200003  FF                 	db	255
  1824                           
  1825                           ;Config register IDLOC4 @ 0x200004
  1826                           ;	unspecified, using default values
  1827  200004                     	org	2097156
  1828  200004  FF                 	db	255
  1829                           
  1830                           ;Config register IDLOC5 @ 0x200005
  1831                           ;	unspecified, using default values
  1832  200005                     	org	2097157
  1833  200005  FF                 	db	255
  1834                           
  1835                           ;Config register IDLOC6 @ 0x200006
  1836                           ;	unspecified, using default values
  1837  200006                     	org	2097158
  1838  200006  FF                 	db	255
  1839                           
  1840                           ;Config register IDLOC7 @ 0x200007
  1841                           ;	unspecified, using default values
  1842  200007                     	org	2097159
  1843  200007  FF                 	db	255
  1844                           
  1845                           	psect	config
  1846                           
  1847                           ;Config register CONFIG1L @ 0x300000
  1848                           ;	PLL Prescaler Selection bits
  1849                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
  1850                           ;	System Clock Postscaler Selection bits
  1851                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  1852                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  1853                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
  1854  300000                     	org	3145728
  1855  300000  00                 	db	0
  1856                           
  1857                           ;Config register CONFIG1H @ 0x300001
  1858                           ;	Oscillator Selection bits
  1859                           ;	FOSC = HS, HS oscillator (HS)
  1860                           ;	Fail-Safe Clock Monitor Enable bit
  1861                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1862                           ;	Internal/External Oscillator Switchover bit
  1863                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1864  300001                     	org	3145729
  1865  300001  0C                 	db	12
  1866                           
  1867                           ;Config register CONFIG2L @ 0x300002
  1868                           ;	Power-up Timer Enable bit
  1869                           ;	PWRT = ON, PWRT enabled
  1870                           ;	Brown-out Reset Enable bits
  1871                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  1872                           ;	Brown-out Reset Voltage bits
  1873                           ;	BORV = 3, Minimum setting 2.05V
  1874                           ;	USB Voltage Regulator Enable bit
  1875                           ;	VREGEN = OFF, USB voltage regulator disabled
  1876  300002                     	org	3145730
  1877  300002  18                 	db	24
  1878                           
  1879                           ;Config register CONFIG2H @ 0x300003
  1880                           ;	Watchdog Timer Enable bit
  1881                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1882                           ;	Watchdog Timer Postscale Select bits
  1883                           ;	WDTPS = 32768, 1:32768
  1884  300003                     	org	3145731
  1885  300003  1E                 	db	30
  1886                           
  1887                           ; Padding undefined space
  1888  300004                     	org	3145732
  1889  300004  FF                 	db	255
  1890                           
  1891                           ;Config register CONFIG3H @ 0x300005
  1892                           ;	CCP2 MUX bit
  1893                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  1894                           ;	PORTB A/D Enable bit
  1895                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1896                           ;	Low-Power Timer 1 Oscillator Enable bit
  1897                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1898                           ;	MCLR Pin Enable bit
  1899                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1900  300005                     	org	3145733
  1901  300005  81                 	db	129
  1902                           
  1903                           ;Config register CONFIG4L @ 0x300006
  1904                           ;	Stack Full/Underflow Reset Enable bit
  1905                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1906                           ;	Single-Supply ICSP Enable bit
  1907                           ;	LVP = OFF, Single-Supply ICSP disabled
  1908                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  1909                           ;	ICPRT = OFF, ICPORT disabled
  1910                           ;	Extended Instruction Set Enable bit
  1911                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1912                           ;	Background Debugger Enable bit
  1913                           ;	DEBUG = 0x1, unprogrammed default
  1914  300006                     	org	3145734
  1915  300006  81                 	db	129
  1916                           
  1917                           ; Padding undefined space
  1918  300007                     	org	3145735
  1919  300007  FF                 	db	255
  1920                           
  1921                           ;Config register CONFIG5L @ 0x300008
  1922                           ;	Code Protection bit
  1923                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  1924                           ;	Code Protection bit
  1925                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  1926                           ;	Code Protection bit
  1927                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  1928                           ;	Code Protection bit
  1929                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  1930  300008                     	org	3145736
  1931  300008  0F                 	db	15
  1932                           
  1933                           ;Config register CONFIG5H @ 0x300009
  1934                           ;	Boot Block Code Protection bit
  1935                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  1936                           ;	Data EEPROM Code Protection bit
  1937                           ;	CPD = OFF, Data EEPROM is not code-protected
  1938  300009                     	org	3145737
  1939  300009  C0                 	db	192
  1940                           
  1941                           ;Config register CONFIG6L @ 0x30000A
  1942                           ;	Write Protection bit
  1943                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  1944                           ;	Write Protection bit
  1945                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  1946                           ;	Write Protection bit
  1947                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  1948                           ;	Write Protection bit
  1949                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  1950  30000A                     	org	3145738
  1951  30000A  0F                 	db	15
  1952                           
  1953                           ;Config register CONFIG6H @ 0x30000B
  1954                           ;	Configuration Register Write Protection bit
  1955                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  1956                           ;	Boot Block Write Protection bit
  1957                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  1958                           ;	Data EEPROM Write Protection bit
  1959                           ;	WRTD = OFF, Data EEPROM is not write-protected
  1960  30000B                     	org	3145739
  1961  30000B  E0                 	db	224
  1962                           
  1963                           ;Config register CONFIG7L @ 0x30000C
  1964                           ;	Table Read Protection bit
  1965                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1966                           ;	Table Read Protection bit
  1967                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1968                           ;	Table Read Protection bit
  1969                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1970                           ;	Table Read Protection bit
  1971                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1972  30000C                     	org	3145740
  1973  30000C  0F                 	db	15
  1974                           
  1975                           ;Config register CONFIG7H @ 0x30000D
  1976                           ;	Boot Block Table Read Protection bit
  1977                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  1978  30000D                     	org	3145741
  1979  30000D  40                 	db	64
  1980                           tosu	equ	0xFFF
  1981                           tosh	equ	0xFFE
  1982                           tosl	equ	0xFFD
  1983                           stkptr	equ	0xFFC
  1984                           pclatu	equ	0xFFB
  1985                           pclath	equ	0xFFA
  1986                           pcl	equ	0xFF9
  1987                           tblptru	equ	0xFF8
  1988                           tblptrh	equ	0xFF7
  1989                           tblptrl	equ	0xFF6
  1990                           tablat	equ	0xFF5
  1991                           prodh	equ	0xFF4
  1992                           prodl	equ	0xFF3
  1993                           indf0	equ	0xFEF
  1994                           postinc0	equ	0xFEE
  1995                           postdec0	equ	0xFED
  1996                           preinc0	equ	0xFEC
  1997                           plusw0	equ	0xFEB
  1998                           fsr0h	equ	0xFEA
  1999                           fsr0l	equ	0xFE9
  2000                           wreg	equ	0xFE8
  2001                           indf1	equ	0xFE7
  2002                           postinc1	equ	0xFE6
  2003                           postdec1	equ	0xFE5
  2004                           preinc1	equ	0xFE4
  2005                           plusw1	equ	0xFE3
  2006                           fsr1h	equ	0xFE2
  2007                           fsr1l	equ	0xFE1
  2008                           bsr	equ	0xFE0
  2009                           indf2	equ	0xFDF
  2010                           postinc2	equ	0xFDE
  2011                           postdec2	equ	0xFDD
  2012                           preinc2	equ	0xFDC
  2013                           plusw2	equ	0xFDB
  2014                           fsr2h	equ	0xFDA
  2015                           fsr2l	equ	0xFD9
  2016                           status	equ	0xFD8

Data Sizes:
    Strings     27
    Constant    0
    Data        51
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     42      46
    BANK0           160      0      50
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strncmp@_r	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_4(CODE[7]), STR_2(CODE[6]), 

    strncmp@r	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_4(CODE[7]), STR_2(CODE[6]), 

    strncmp@_l	PTR const unsigned char  size(2) Largest target is 50
		 -> NULL(NULL[0]), strRx(BANK0[50]), 

    strncmp@l	PTR const unsigned char  size(2) Largest target is 50
		 -> NULL(NULL[0]), strRx(BANK0[50]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_4(CODE[7]), STR_2(CODE[6]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_4(CODE[7]), STR_2(CODE[6]), 

    strchr@s	PTR const unsigned char  size(2) Largest target is 50
		 -> NULL(NULL[0]), strRx(BANK0[50]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 50
		 -> NULL(NULL[0]), strRx(BANK0[50]), 

    strstr@h	PTR const unsigned char  size(2) Largest target is 50
		 -> NULL(NULL[0]), strRx(BANK0[50]), 

    strstr@n	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_4(CODE[7]), STR_2(CODE[6]), 

    memset@dest	PTR void  size(2) Largest target is 50
		 -> strRx(BANK0[50]), 

    memset@s	PTR unsigned char  size(2) Largest target is 50
		 -> strRx(BANK0[50]), 

    UART_Write_Text@text	PTR unsigned char  size(2) Largest target is 12
		 -> STR_6(CODE[12]), 

    sp__memset	PTR void  size(2) Largest target is 50
		 -> strRx(BANK0[50]), 

    sp__strstr	PTR unsigned char  size(2) Largest target is 50
		 -> NULL(NULL[0]), strRx(BANK0[50]), 


Critical Paths under _main in COMRAM

    _main->_UART_Init
    _strstr->_strncmp
    _UART_Write_Text->_UART_Write_Chr
    _UART_Init->___lldiv

Critical Paths under _appLedRxData in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _appLedRxData in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _appLedRxData in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _appLedRxData in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _appLedRxData in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _appLedRxData in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _appLedRxData in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _appLedRxData in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _appLedRxData in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0    3074
                                             32 COMRAM    10    10      0
                          _UART_Init
                    _UART_Write_Text
                             _memset
                             _strstr
 ---------------------------------------------------------------------------------
 (1) _strstr                                               6     2      4    1385
                                             14 COMRAM     6     2      4
                             _strchr
                             _strlen
                            _strncmp
 ---------------------------------------------------------------------------------
 (2) _strncmp                                             11     5      6     453
                                              3 COMRAM    11     5      6
 ---------------------------------------------------------------------------------
 (2) _strlen                                               4     2      2     166
                                              3 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _strchr                                               5     1      4     240
                                              3 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (1) _memset                                              12     6      6     947
                                              3 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (1) _UART_Write_Text                                      2     0      2     143
                                              4 COMRAM     2     0      2
                     _UART_Write_Chr
 ---------------------------------------------------------------------------------
 (2) _UART_Write_Chr                                       1     1      0      22
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                           16     8      8     504
                                             16 COMRAM    16     8      8
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                              3 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _appLedRxData                                         3     3      0       0
                                              0 COMRAM     3     3      0
                          _UART_Read
 ---------------------------------------------------------------------------------
 (4) _UART_Read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_Init
     ___lldiv
   _UART_Write_Text
     _UART_Write_Chr
   _memset
   _strstr
     _strchr
     _strlen
     _strncmp

 _appLedRxData (ROOT)
   _UART_Read

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      27        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0      0      32       6       31.2%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2A      2E       1       48.9%
BITBIGSFRhlh        42      0       0      22        0.0%
BITBIGSFRlll        23      0       0      26        0.0%
BITBIGSFRllh        11      0       0      25        0.0%
BITBIGSFRhh          D      0       0      21        0.0%
BITBIGSFRhlll        C      0       0      23        0.0%
BITBIGSFRlh          7      0       0      24        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      60       3        0.0%
DATA                 0      0      60       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Fri May 05 08:19:13 2023

                     l81 0B24                       l83 0B2E                       l91 0F4A  
                     l84 0B36                       l85 0B6A                       l88 0F38  
                     l97 0F02                      l140 0DA4                      l133 0D94  
                    l800 0D00                      l806 0E02                      l815 0ECC  
                    l808 0E4C                      l819 0C40                      l781 0992  
                    u400 0B96                      u401 0B92                      u410 0BC8  
                    u411 0BC4                      u420 0BE4                      u421 0BE0  
                    u510 0B18                      u350 0F46                      u430 0BF6  
                    u511 0B12                      u351 0F42                      u431 0BF2  
                    u360 0D28                      u600 0932                      u440 0C1E  
                    u361 0D24                      u505 0B04                      u601 092E  
                    u441 0C1A                      u370 0D4A                      u610 0992  
                    u450 0E1C                      u530 0C54                      u371 0D46  
                    u611 098E                      u451 0E18                      u531 0C50  
                    u380 0D72                      u620 0F02                      u460 0E44  
                    u540 0C9A                      u381 0D6E                      u525 0B1A  
                    u621 0EFE                      u461 0E40                      u541 0C96  
                    u390 0EC0                      u550 0CE0                      u391 0EBC  
                    u551 0CDC                      u560 0CF8                      u561 0CF4  
                    u490 0B02                      u570 0838                      u491 0AFC  
                    u571 0834                      u651 09C2                      u580 087A  
                    u660 09DE                      u485 0AA6                      u581 0876  
                    u661 09DA                      u590 08EC                      u670 0A04  
                    u591 08E8                      u671 0A00                      u680 0A30  
                    u681 0A2C                      u697 0A70                      _RX9 007D5E  
                    _TX9 007D66                      wreg 000FE8                     l1110 0AE6  
                   l1040 0D28                     l1120 0B1C                     l1112 0AEA  
                   l1032 0F38                     l1050 0D72                     l1042 0D30  
                   l1122 0B1E                     l1114 0AEE                     l1106 0A84  
                   l1034 0F46                     l1210 099C                     l1052 0D82  
                   l1044 0D3C                     l1036 0D02                     l1124 0B28  
                   l1132 0B40                     l1116 0B04                     l1108 0AE2  
                   l1060 0EA0                     l1140 0C54                     l1220 0A0A  
                   l1212 09B8                     l1054 0D84                     l1046 0D4A  
                   l1038 0D12                     l1118 0B1A                     l1062 0EA4  
                   l1070 0B96                     l1142 0C6C                     l1150 0CCE  
                   l1222 0A30                     l1230 0A5A                     l1214 09CE  
                   l1056 0D8E                     l1048 0D54                     l1128 0B3A  
                   l1064 0EC0                     l1080 0BE4                     l1152 0CE0  
                   l1144 0C9A                     l1232 0A66                     l1224 0A32  
                   l1216 09DE                     l1208 0994                     l1170 08D6  
                   l1162 083C                     l1090 0E1C                     l1058 0E94  
                   l1082 0BF6                     l1074 0BA2                     l1154 0CF8  
                   l1138 0C42                     l1226 0A3A                     l1218 0A04  
                   l1180 0936                     l1164 0848                     l1084 0C1E  
                   l1076 0BB0                     l1068 0B6C                     l1148 0CA6  
                   l1228 0A56                     l1238 0B54                     l1190 0ECE  
                   l1182 096A                     l1174 08F0                     l1158 081E  
                   l1094 0E28                     l1078 0BC8                     l1192 0ED2  
                   l1184 0976                     l1176 091C                     l1168 087E  
                   l1096 0E44                     l1088 0E02                     l1194 0EE2  
                   l1186 097C                     l1196 0EE6                     l1188 0980  
                   STR_1 0814                     STR_2 0814                     STR_3 080D  
                   STR_4 080D                     STR_5 081A                     STR_6 0801  
                   _BRGH 007D62                     i2l37 0DF6                     _SPEN 007D5F  
                   _TX9D 007D60                     _TXEN 007D65                     _SYNC 007D64  
                   _main 0994                     fsr2h 000FDA                     indf2 000FDF  
                   fsr1l 000FE1                     fsr2l 000FD9                     btemp 002F  
                   start 000E     __end_of_appLedRxData 0E02             ___param_bank 000000  
__end_of_UART_Write_Text 0F04                    ?_main 0001          __end_of___lldiv 0DA6  
                  i2l100 0F4C                    i2l103 0F5C                    _RCREG 000FAE  
                  _RCSTA 000FAB                    _SPBRG 000FAF                    _TXREG 000FAD  
                  _TXSTA 000FAC                    _strRx 0060                    tablat 000FF5  
                  plusw0 000FEB                    plusw2 000FDB                    ttemp5 0030  
                  ttemp6 0033                    ttemp7 0037                    status 000FD8  
                  wtemp8 0030          __end_of_strncmp 0C42          __initialization 0E4E  
           __end_of_main 0A84                   ??_main 0021            __activetblptr 000002  
                 i2l1100 0F4C                   i2l1102 0F5A                   i2l1200 0DBE  
                 i2l1202 0DD0                   i2l1204 0DEE                   i2l1206 0DF2  
                 i2l1198 0DB0        __end_of_UART_Init 0B6C        __end_of_UART_Read 0F5E  
       ?_UART_Write_Text 0005                ??___lldiv 000C                   _memset 081E  
                 isa$std 000001                   _strchr 0E02                   _strlen 0E94  
                 _strstr 0C42             __pdataCOMRAM 002E             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
              ??_strncmp 000A               __accesstop 0060  __end_of__initialization 0E86  
          ___rparam_used 000001           __pcstackCOMRAM 0001             __pidataBANK0 0F04  
           _appLedRxData 0008                  ?_memset 0004                  ?_strchr 0004  
                ?_strlen 0004                  ?_strstr 000F                  i2u47_40 0F5A  
                i2u63_40 0DBE                  i2u47_41 0F56                  i2u63_41 0DBA  
                i2u64_40 0DEE                  i2u64_41 0DEA                  __Hparam 0000  
                __Lparam 0000                  ___lldiv 0D02             __psmallconst 0800  
                __pcinit 0E4E                  __ramtop 0800                  __ptext0 0994  
                __ptext1 0C42                  __ptext2 0B6C                  __ptext3 0E94  
                __ptext4 0E02                  __ptext5 081E                  __ptext6 0ECE  
                __ptext7 0F36                  __ptext8 0A84                  __ptext9 0D02  
                _indexRx 002B           main@uartConfig 0023                  _opletra 002E  
                _strncmp 0B6C           __pintcode_body 0DA6     end_of_initialization 0E86  
                memset@c 0006                  memset@k 000C                  memset@n 0008  
                memset@s 000E            __Lmediumconst 0000                  int_func 0DA6  
        ___lldiv@divisor 0008          ___lldiv@counter 0010                  postdec1 000FE5  
                postinc0 000FEE                  postinc2 000FDE           _UART_Write_Chr 0F36  
                strchr@c 0006                  strchr@s 0004                  strlen@a 0006  
                strlen@s 0004                _UART_Init 0A84                _UART_Read 0F4C  
                strstr@h 000F                  strstr@n 0011                _PORTDbits 000F83  
              _TRISDbits 000F95                _TXSTAbits 000FAC     UART_Write_Chr@letter 0004  
 __end_of_UART_Write_Chr 0F4C               ?_UART_Init 0011               ?_UART_Read 0001  
          __pidataCOMRAM 0F5E           __end_of_memset 0994           __end_of_strchr 0E4E  
         __end_of_strlen 0ECE           __end_of_strstr 0D02      start_initialization 0E4E  
     UART_Init@spbrg_val 001D          ?_UART_Write_Chr 0001              __pdataBANK0 0060  
               ??_memset 000A               memset@dest 0004                 ??_strchr 0008  
               ??_strlen 0006                 ??_strstr 0013              __pbssCOMRAM 002B  
              __pintcode 0008                 ?___lldiv 0004              ??_UART_Init 0019  
            ??_UART_Read 0001          UART_Init@config 0011              __smallconst 0800  
               ?_strncmp 0004        ??_UART_Write_Text 0007                 _PIE1bits 000F9D  
               _PIR1bits 000F9E                copy_data0 0E62                 __Hrparam 0000  
               __Lrparam 0000            ?_appLedRxData 0001                 __ptext11 0F4C  
    UART_Write_Text@text 0005         ??_UART_Write_Chr 0004          _interpretarFlag 002D  
               isa$xinst 000000                 int$flags 002F           ??_appLedRxData 0001  
             _INTCONbits 000FF2                 intlevel2 0000         ___lldiv@dividend 0004  
              strncmp@_l 0004                strncmp@_r 0006          _UART_Write_Text 0ECE  
       ___lldiv@quotient 000C                 strncmp@l 000B                 strncmp@n 0008  
               strncmp@r 000D                 strstr@nl 0013  
